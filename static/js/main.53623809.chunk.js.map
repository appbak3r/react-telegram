{"version":3,"sources":["services/telegram.worker.ts","utils/makeIcon.tsx","assets/icons/logo.svg","components/common/icons/LogoIcon.tsx","components/common/logo/Logo.tsx","components/pages/app-loading/AppLoading.tsx","components/pages/AppRoute.tsx","store/telegram/types.ts","store/telegram/actions.ts","store/auth/actions.ts","store/auth/types.ts","assets/icons/spinner.svg","components/common/icons/SpinnerIcon.tsx","components/common/button/Button.tsx","components/forms/input/Input.tsx","components/auth/logout-button/LogoutButton.tsx","components/auth/code-form/CodeForm.tsx","components/auth/password-form/PasswordForm.tsx","components/forms/phone-number-input-select/PhoneNumberCountrySelect.tsx","components/forms/phone-number-input/PhoneNumberInput.tsx","components/auth/phone-form/PhoneForm.tsx","components/auth/login-form/LoginForm.tsx","components/pages/login/Login.tsx","components/pages/messenger/Messenger.tsx","components/pages/PrivateRoute.tsx","store/app/actions.ts","store/app/types.ts","App.tsx","components/common/connected-intl-provider/ConnectedIntlProvider.ts","config/environmentDefault.ts","config/environmentProduction.ts","config/environment.ts","store/app/reducer.ts","store/auth/reducer.ts","store/telegram/reducer.ts","store/reducer.ts","services/GeoApiService.ts","store/app/saga.ts","store/telegram/saga.ts","store/auth/saga.ts","store/saga.ts","store/configureStore.ts","index.tsx","utils/enableTabMode.ts"],"names":["module","exports","Worker","__webpack_require__","p","makeIcon","iconId","className","react_default","a","createElement","focusable","xlinkHref","concat","symbol","browser_symbol_default","id","use","viewBox","content","logo","browser_sprite_build_default","add","LogoIcon","_ref","TelegramLogo","Logo","title","bem","block","LogoIcon_LogoIcon","index_es","defaultMessage","AppLoading","_PureComponent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","Logo_Logo","PureComponent","AppRoute","connect","state","telegram","app","props","component","restProps","objectWithoutProperties","Component","Route","assign","render","isReady","fetching","AppLoading_AppLoading","AUTHORIZATION_STATES","PHONE_NUMBER","CODE","PASSWORD","AUTHORIZED","LOGGING_OUT","LOADING","CLOSED","TELEGRAM_MESSAGE_TYPES","UPDATE_CONNECTION_STATE","UPDATE_AUTHORIZATION_STATE","UPDATE_OPTION","READY","TELEGRAM_CONNECTION_STATE","SendMessageAction","createAction","action","data","SendMessageFailureAction","SendMessageSuccessAction","ReceiveMessageAction","LogoutAction","LogoutSuccessAction","LogoutFailureAction","LoginSuccessAction","SetPhoneNumberAction","phone","SetPhoneNumberSuccessAction","SetPhoneNumberFailureAction","SetCodeAction","code","SetCodeSuccessAction","SetCodeFailureAction","ResendCodeAction","ResendCodeSuccessAction","ResendCodeFailureAction","spinner_symbol","spinner","SpinnerIcon","spinnerIcon","Button","_classNames","_this$props","loading","rootClassNames","classNames","defineProperty","is","Boolean","children","SpinnerIcon_SpinnerIcon","Input","name","errorMessage","validate","react_final_form_es","input","meta","hasError","touched","error","LogoutButton","dispatch","bindActionCreators","logout","_dec","_class","Button_Button","onClick","CodeForm","auth","setCode","resendCode","onSubmit","_this","_this2","_ref2","handleSubmit","Input_Input","type","autoFocus","isFetching","LogoutButton_LogoutButton","PasswordForm","_getPrototypeOf2","_len","length","args","Array","_key","call","values","objectSpread","@type","NO_COUNTRY","PhoneNumberCountrySelect","onChange","option","undefined","options","onBlur","onFocus","fixedOptions","map","selectedOption","find","Fragment","React","icon","react_select_esm","defaultProps","PhoneNumberInput","country","countryCode","PhoneNumberInput_dec","PhoneNumberInput_class","ref","createRef","current","focus","react_phone_number_input","inputClassName","toString","international","countrySelectComponent","PhoneForm","setPhoneNumber","PhoneNumberInput_PhoneNumberInput","LoginForm","renderForm","PasswordForm_PasswordForm","Login","sendMessage","Login_dec","Login_class","_Component","authState","isAuthorized","Redirect","to","Helmet","LoginForm_LoginForm","Messenger","PrivateRoute","es_Redirect","GetCountryCodeAction","GetCountryCodeSuccessAction","GetCountryCodeFailureAction","App","getCountryCode","pure","App_dec","App_class","Switch","path","exact","addLocaleData","toConsumableArray","en","messages","require","TextComponent","ConnectedIntlProvider","locale","IntlProvider","apiHash","process","environmentDefault","apiId","isLoggerEnabled","useTestDC","REACT_APP_TELEGRAM_PRODUCTION_DC","environmentProduction","environment","initialState","isRegistered","isConnecting","rootReducer","combineReducers","getType","actions","payload","toUpperCase","telegramActions","message","authorization_state","code_info","is_registered","GeoApiService","fetch","then","response","json","ip","country_code","appSaga","regenerator_default","wrap","_context","prev","next","sent","put","t0","stop","_marked","_context2","all","takeEvery","_marked2","worker","subscribeToTelegramWorker","dispatchMessage","telegramSaga","TelegramWorker","promises","Map","channel","eventChannel","emit","onmessage","event","terminate","saga_marked","messageId","promise","console","log","get","reject","resolve","abrupt","saga_marked2","_context3","Error","asyncSendMessage","_marked3","Promise","uuid","v4","set","postMessage","@extra","loadInitialData","_context4","_marked4","updateAuthorization","authSaga","auth_saga_marked","auth_saga_marked2","phone_number","saga_marked3","saga_marked4","_context5","_marked5","_context6","_marked6","rootSaga","store_saga_marked","logger","createLogger","predicate","sagaMiddleware","createSagaMiddleware","rootElement","document","getElementById","AppStore","preloadedState","store","createStore","applyMiddleware","run","configureStore","ReactDOM","es","textComponent","HashRouter","TAB_MODE_CLASSNAME","onMouseMove","body","classList","remove","removeEventListener","addEventListener","enableTabMode"],"mappings":"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","file":"static/js/main.53623809.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"telegram.worker.cd4afbcfc6e3ea0f62de.js\");\n};","import React from \"react\";\n\nexport type IconProps = {\n  className?: string;\n};\n\nexport const makeIcon = (iconId: string, className?: string) => {\n  return (\n    <svg className={className} focusable=\"false\">\n      <use xlinkHref={`#${iconId}`} />\n    </svg>\n  );\n};\n","import SpriteSymbol from \"svg-baker-runtime/browser-symbol\";\nimport sprite from \"svg-sprite-loader/runtime/browser-sprite.build\";\nvar symbol = new SpriteSymbol({\n  \"id\": \"logo\",\n  \"use\": \"logo-usage\",\n  \"viewBox\": \"0 0 240 240\",\n  \"content\": \"<symbol xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 240 240\\\" id=\\\"logo\\\"><defs><linearGradient id=\\\"logo_a\\\" x1=\\\".667\\\" y1=\\\".167\\\" x2=\\\".417\\\" y2=\\\".75\\\"><stop stop-color=\\\"#37aee2\\\" offset=\\\"0\\\" /><stop stop-color=\\\"#1e96c8\\\" offset=\\\"1\\\" /></linearGradient><linearGradient id=\\\"logo_b\\\" x1=\\\".66\\\" y1=\\\".437\\\" x2=\\\".851\\\" y2=\\\".802\\\"><stop stop-color=\\\"#eff7fc\\\" offset=\\\"0\\\" /><stop stop-color=\\\"#fff\\\" offset=\\\"1\\\" /></linearGradient></defs><circle cx=\\\"120\\\" cy=\\\"120\\\" r=\\\"120\\\" fill=\\\"url(#logo_a)\\\" /><path fill=\\\"#c8daea\\\" d=\\\"m98 175c-3.8876 0-3.227-1.4679-4.5678-5.1695L82 132.2059 170 80\\\" /><path fill=\\\"#a9c9dd\\\" d=\\\"m98 175c3 0 4.3255-1.372 6-3l16-15.558-19.958-12.035\\\" /><path fill=\\\"url(#logo_b)\\\" d=\\\"m100.04 144.41 48.36 35.729c5.5185 3.0449 9.5014 1.4684 10.876-5.1235l19.685-92.763c2.0154-8.0802-3.0801-11.745-8.3594-9.3482l-115.59 44.571c-7.8901 3.1647-7.8441 7.5666-1.4382 9.528l29.663 9.2583 68.673-43.325c3.2419-1.9659 6.2173-0.90899 3.7752 1.2584\\\" /></symbol>\"\n});\nvar result = sprite.add(symbol);\nexport default symbol","import { FunctionComponent } from \"react\";\nimport { IconProps, makeIcon } from \"../../../utils/makeIcon\";\nimport TelegramLogo from \"../../../assets/icons/logo.svg\";\n\nexport const LogoIcon: FunctionComponent<IconProps> = ({ className }) =>\n  makeIcon(TelegramLogo.id, className);\n","import block from \"bem-cn\";\nimport React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { LogoIcon } from \"../icons/LogoIcon\";\nimport \"./logo.scss\";\n\ntype LogoProps = {\n  title?: string | React.ReactNode;\n};\n\nexport const Logo: React.FunctionComponent<LogoProps> = ({ title }) => {\n  const bem = block(\"rt-logo\");\n\n  return (\n    <div className={bem()}>\n      <LogoIcon className={bem(\"icon\")} />\n\n      <div className={bem(\"title\")}>\n        <FormattedMessage\n          id={\"components.logo.title\"}\n          defaultMessage={\"Telegram\"}\n        />\n      </div>\n\n      {title && <div className={bem(\"subtitle\")}>{title}</div>}\n    </div>\n  );\n};\n","import React, { PureComponent } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Logo } from \"../../common/logo/Logo\";\nimport \"./styles.scss\";\n\nexport class AppLoading extends PureComponent {\n  render() {\n    return (\n      <div className=\"rt-app-loading\">\n        <div className=\"rt-app-loading__body\">\n          <Logo\n            title={\n              <FormattedMessage\n                id={\"components.app-loading.title\"}\n                defaultMessage={\"a new era of messaging\"}\n              />\n            }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, RouteProps } from \"react-router-dom\";\n\nimport { AppLoading } from \"./app-loading/AppLoading\";\nimport { RootState } from \"../../store/reducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    telegram: state.telegram,\n    app: state.app\n  };\n};\n\nexport const AppRoute: React.ComponentType<RouteProps> = connect(\n  mapStateToProps\n)((props: RouteProps & RootState) => {\n  const { component, telegram, app, ...restProps } = props;\n\n  const Component: React.ComponentType<any> = component as any;\n\n  return (\n    <Route\n      {...restProps}\n      render={(props) => {\n        if (!telegram.isReady || app.fetching) {\n          return <AppLoading />;\n        }\n\n        return <Component {...props} />;\n      }}\n    />\n  );\n}) as any;\n","export const SEND_MESSAGE_FETCHING = \"@@rt/telegram/send-message/fetching\";\nexport const SEND_MESSAGE_SUCCESS = \"@@rt/telegram/send-message/success\";\nexport const SEND_MESSAGE_FAILURE = \"@@rt/telegram/send-message/failure\";\n\nexport const RECEIVE_MESSAGE = \"@rt/telegram/receive-message\";\n\nexport const AUTHORIZATION_STATES = {\n  PHONE_NUMBER: \"authorizationStateWaitPhoneNumber\",\n  CODE: \"authorizationStateWaitCode\",\n  PASSWORD: \"authorizationStateWaitPassword\",\n  AUTHORIZED: \"authorizationStateReady\",\n  LOGGING_OUT: \"authorizationStateLoggingOut\",\n  LOADING: \"authorizationStateWaitEncryptionKey\",\n  CLOSED: \"authorizationStateClosed\"\n};\n\nexport type TelegramMessage = {\n  [key: string]: any;\n};\n\nexport type TelegramMessagePayload = {\n  data: TelegramMessage;\n};\n\nexport const TELEGRAM_MESSAGE_TYPES = {\n  UPDATE_CONNECTION_STATE: \"updateConnectionState\",\n  UPDATE_AUTHORIZATION_STATE: \"updateAuthorizationState\",\n  UPDATE_OPTION: \"updateOption\",\n  READY: \"ok\"\n};\n\nexport const TELEGRAM_CONNECTION_STATE = {\n  CONNECTING: \"connectionStateConnecting\",\n  READY: \"connectionStateReady\"\n};\n\nexport const TELEGRAM_AUTHETNTICATION_CODE_TYPES = {\n  SMS: \"authenticationCodeTypeSms\",\n  MESSAGE: \"authenticationCodeTypeTelegramMessage\"\n};\n\nexport type TelegramOptions = {\n  animation_search_bot_username: string;\n  authorization_date: number;\n  basic_group_size_max: number;\n  call_connect_timeout_ms: number;\n  call_packet_timeout_ms: number;\n  calls_enabled: boolean;\n  favorite_stickers_limit: number;\n  forwarded_message_count_max: number;\n  message_caption_length_max: number;\n  message_text_length_max: number;\n  my_id: number;\n  photo_search_bot_username: string;\n  pinned_chat_count_max: number;\n  supergroup_size_max: number;\n  t_me_url: string;\n  test_mode: boolean;\n  venue_search_bot_username: string;\n  version: string;\n  [key: string]: any;\n};\n","import { createAction } from \"typesafe-actions\";\nimport {\n  RECEIVE_MESSAGE,\n  SEND_MESSAGE_FAILURE,\n  SEND_MESSAGE_FETCHING,\n  SEND_MESSAGE_SUCCESS,\n  TelegramMessage,\n  TelegramMessagePayload\n} from \"./types\";\n\nexport const SendMessageAction = createAction(\n  SEND_MESSAGE_FETCHING,\n  (action) => (data: TelegramMessage) => action(data)\n);\nexport const SendMessageFailureAction = createAction(SEND_MESSAGE_FAILURE);\nexport const SendMessageSuccessAction = createAction(SEND_MESSAGE_SUCCESS);\n\nexport const ReceiveMessageAction = createAction(\n  RECEIVE_MESSAGE,\n  (action) => (data: TelegramMessagePayload) => action(data)\n);\n","import { createAction } from \"typesafe-actions\";\nimport * as types from \"./types\";\n\nexport const LogoutAction = createAction(types.LOGOUT_FETCHING);\nexport const LogoutSuccessAction = createAction(types.LOGOUT_SUCCESS);\nexport const LogoutFailureAction = createAction(types.LOGOUT_FAILURE);\n\nexport const LoginSuccessAction = createAction(types.LOGIN_SUCCESS);\n\nexport const SetPhoneNumberAction = createAction(\n  types.SET_PHONE_NUMBER,\n  (action) => (phone: string) => action({ phone })\n);\nexport const SetPhoneNumberSuccessAction = createAction(\n  types.SET_PHONE_NUMBER_SUCCESS\n);\nexport const SetPhoneNumberFailureAction = createAction(\n  types.SET_PHONE_NUMBER_FAILURE\n);\n\nexport const SetCodeAction = createAction(\n  types.SET_CODE,\n  (action) => (code: string) => action({ code })\n);\nexport const SetCodeSuccessAction = createAction(types.SET_CODE_SUCCESS);\nexport const SetCodeFailureAction = createAction(types.SET_CODE_FAILURE);\n\nexport const ResendCodeAction = createAction(types.RESEND_CODE);\nexport const ResendCodeSuccessAction = createAction(types.RESEND_CODE_SUCCESS);\nexport const ResendCodeFailureAction = createAction(types.RESEND_CODE_FAILURE);\n","export const LOGOUT_FETCHING = \"@@rt/auth/logout/fetching\";\nexport const LOGOUT_SUCCESS = \"@@rt/auth/logout/success\";\nexport const LOGOUT_FAILURE = \"@@rt/auth/logout/failure\";\n\nexport const LOGIN_SUCCESS = \"@rt/auth/login/success\";\n\nexport const SET_PHONE_NUMBER = \"@rt/auth/set-phone-number/fetching\";\nexport const SET_PHONE_NUMBER_SUCCESS = \"@rt/auth/set-phone-number/success\";\nexport const SET_PHONE_NUMBER_FAILURE = \"@rt/auth/set-phone-number/failure\";\n\nexport const SET_CODE = \"@rt/auth/set-code/fetching\";\nexport const SET_CODE_SUCCESS = \"@rt/auth/set-code/success\";\nexport const SET_CODE_FAILURE = \"@rt/auth/set-code/failure\";\n\nexport const RESEND_CODE = \"@rt/auth/resend-code/fetching\";\nexport const RESEND_CODE_SUCCESS = \"@rt/auth/resend-code/success\";\nexport const RESEND_CODE_FAILURE = \"@rt/auth/resend-code/failure\";\n","import SpriteSymbol from \"svg-baker-runtime/browser-symbol\";\nimport sprite from \"svg-sprite-loader/runtime/browser-sprite.build\";\nvar symbol = new SpriteSymbol({\n  \"id\": \"spinner\",\n  \"use\": \"spinner-usage\",\n  \"viewBox\": \"0 0 100 100\",\n  \"content\": \"<symbol class=\\\"lds-spinner\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 100 100\\\" preserveAspectRatio=\\\"xMidYMid\\\" id=\\\"spinner\\\"><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.9166666666666666s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(30 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.8333333333333334s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(60 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.75s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(90 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.6666666666666666s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(120 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.5833333333333334s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(150 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.5s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(180 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.4166666666666667s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(210 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.3333333333333333s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(240 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.25s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(270 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.16666666666666666s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(300 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.08333333333333333s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(330 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"0s\\\" repeatCount=\\\"indefinite\\\"></animate></rect></symbol>\"\n});\nvar result = sprite.add(symbol);\nexport default symbol","import React, { FunctionComponent } from \"react\";\nimport { IconProps, makeIcon } from \"../../../utils/makeIcon\";\nimport spinnerIcon from \"../../../assets/icons/spinner.svg\";\n\nexport const SpinnerIcon: FunctionComponent<IconProps> = ({ className }) =>\n  makeIcon(spinnerIcon.id, className);\n","import block from \"bem-cn\";\nimport classNames from \"classnames\";\nimport React, { ButtonHTMLAttributes, PureComponent } from \"react\";\nimport { SpinnerIcon } from \"../icons/SpinnerIcon\";\nimport \"./styles.scss\";\n\ntype ButtonProps = {\n  loading?: boolean;\n} & ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport class Button extends PureComponent<ButtonProps> {\n  render() {\n    const { className, loading, ...restProps } = this.props;\n\n    const bem = block(\"rt-button\");\n\n    const rootClassNames = classNames({\n      [bem.is({ loading: Boolean(loading) })]: true,\n      [className as string]: className\n    });\n\n    return (\n      <button {...restProps} className={rootClassNames}>\n        {this.props.children}\n        {loading && <SpinnerIcon className={bem(\"loading-icon\")} />}\n      </button>\n    );\n  }\n}\n","import block from \"bem-cn\";\nimport React, { InputHTMLAttributes, PureComponent } from \"react\";\nimport { Field } from \"react-final-form\";\nimport \"./styles.scss\";\n\ntype InputProps = {\n  name: string;\n  validate?: (value: string) => any;\n  errorMessage?: string;\n} & InputHTMLAttributes<HTMLInputElement>;\n\nexport class Input extends PureComponent<InputProps> {\n  render(): React.ReactNode {\n    const { name, errorMessage, validate, ...restProps } = this.props;\n\n    const bem = block(\"rt-input\");\n\n    return (\n      <Field name={name} validate={validate}>\n        {({ input, meta }) => {\n          const hasError = meta.touched && meta.error;\n\n          return (\n            <div className={bem()}>\n              <input {...input} {...restProps} className={bem(\"input\")} />\n\n              {hasError && (\n                <div className={bem(\"error\")}>{errorMessage || meta.error}</div>\n              )}\n            </div>\n          );\n        }}\n      </Field>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport { Button } from \"../../common/button/Button\";\nimport { LogoutAction } from \"../../../store/auth/actions\";\nimport { FormattedMessage } from \"react-intl\";\n\ntype OwnProps = {};\n\ntype DispatchProps = {\n  logout: typeof LogoutAction;\n  title?: string | React.ReactNode;\n};\n\ntype LogoutButtonProps = OwnProps & Partial<DispatchProps>;\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return bindActionCreators(\n    {\n      logout: LogoutAction\n    },\n    dispatch\n  );\n};\n\n@((connect as any)(null, mapDispatchToProps))\nexport class LogoutButton extends PureComponent<LogoutButtonProps> {\n  render() {\n    const { title } = this.props;\n    return (\n      <Button className=\"ri-logout-button\" onClick={this.props.logout}>\n        {title || (\n          <FormattedMessage\n            id={\"components.logout-button.title\"}\n            defaultMessage={\"Logout\"}\n          />\n        )}\n      </Button>\n    );\n  }\n}\n","import block from \"bem-cn\";\nimport React, { PureComponent } from \"react\";\nimport { Form } from \"react-final-form\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { ResendCodeAction, SetCodeAction } from \"../../../store/auth/actions\";\nimport { AuthState } from \"../../../store/auth/reducer\";\nimport { RootState } from \"../../../store/reducer\";\nimport { Button } from \"../../common/button/Button\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Input } from \"../../forms/input/Input\";\nimport { LogoutButton } from \"../logout-button/LogoutButton\";\nimport \"./styles.scss\";\n\ntype StateProps = AuthState;\n\ntype DispatchProps = {\n  setCode: typeof SetCodeAction;\n  resendCode: typeof ResendCodeAction;\n};\n\ntype OwnProps = {};\n\ntype CodeFormProps = OwnProps & DispatchProps & StateProps;\n\ntype FormValues = {\n  code?: string;\n};\n\nconst mapStateToProps = (state: RootState) => {\n  return state.auth;\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return bindActionCreators(\n    {\n      setCode: SetCodeAction,\n      resendCode: ResendCodeAction\n    },\n    dispatch\n  );\n};\n\n@((connect as any)(mapStateToProps, mapDispatchToProps))\nclass ConnectedCodeForm extends PureComponent<CodeFormProps> {\n  onSubmit = ({ code }: FormValues) => {\n    if (code) {\n      this.props.setCode(code);\n    }\n  };\n\n  resendCode = () => {\n    this.props.resendCode();\n  };\n\n  render() {\n    const bem = block(\"rt-code-form\");\n\n    return (\n      <Form onSubmit={this.onSubmit}>\n        {({ handleSubmit }) => {\n          return (\n            <form onSubmit={handleSubmit} className={bem()}>\n              <h1 className=\"rt-h1\">\n                <FormattedMessage\n                  id={\"components.code-form.title\"}\n                  defaultMessage={\"Enter code\"}\n                />\n              </h1>\n\n              <div className={bem(\"input\")}>\n                <Input name=\"code\" type=\"number\" autoFocus={true} />\n              </div>\n\n              <div className={bem(\"actions\")}>\n                <Button type=\"button\" onClick={this.resendCode}>\n                  <FormattedMessage\n                    id=\"components.code-form.resend\"\n                    defaultMessage={\"Resend\"}\n                  />\n                </Button>\n\n                <Button\n                  className=\"rt-button--primary\"\n                  loading={this.props.isFetching}>\n                  <FormattedMessage\n                    id=\"components.code-form.submit\"\n                    defaultMessage={\"Next\"}\n                  />\n                </Button>\n              </div>\n\n              <LogoutButton\n                title={\n                  <FormattedMessage\n                    id={\"components.code-form.logout\"}\n                    defaultMessage={\"Use different number?\"}\n                  />\n                }\n              />\n            </form>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport const CodeForm = (ConnectedCodeForm as unknown) as React.ComponentType<\n  OwnProps\n>;\n","import React, { PureComponent } from \"react\";\nimport { Form } from \"react-final-form\";\n\ninterface PasswordFormProps {\n  onSubmit: (message: any) => void;\n}\n\nexport class PasswordForm extends PureComponent<PasswordFormProps> {\n  onSubmit = (values: any) => {\n    this.props.onSubmit({\n      \"@type\": \"checkAuthenticationPassword\",\n      ...values\n    });\n  };\n\n  render() {\n    return (\n      <Form onSubmit={this.onSubmit}>\n        {({ handleSubmit }) => {\n          return (\n            <form onSubmit={handleSubmit} className=\"rt-password-form\">\n              <h1>Enter password</h1>\n\n              <button>submit</button>\n            </form>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n","import block from \"bem-cn\";\nimport React, { PureComponent, SelectHTMLAttributes } from \"react\";\nimport Select from \"react-select\";\n\ntype Option = {\n  value: string;\n  label: string;\n  icon: React.FunctionComponent<{ value: string }>;\n};\n\ntype PhoneNumberCountrySelectProps = {\n  name: string;\n  onChange: (value: string | undefined) => void;\n  options: Option[];\n} & SelectHTMLAttributes<HTMLSelectElement>;\n\nconst NO_COUNTRY = \"ZZ\";\n\nexport class PhoneNumberCountrySelect extends PureComponent<\n  PhoneNumberCountrySelectProps\n> {\n  static defaultProps: Partial<PhoneNumberCountrySelectProps> = {\n    value: NO_COUNTRY\n  };\n\n  onChange = (option: Option) => {\n    const { onChange } = this.props;\n\n    onChange(option.value === NO_COUNTRY ? undefined : option.value);\n  };\n\n  render() {\n    const bem = block(\"rt-phone-number-country-select\");\n\n    const { value, options, onBlur, onFocus } = this.props;\n\n    const fixedOptions = options.map((option: Option) => {\n      return {\n        ...option,\n        value: option.value || NO_COUNTRY\n      };\n    });\n\n    const selectedOption = fixedOptions.find(\n      (option: Option) => option.value === value\n    );\n\n    return (\n      <React.Fragment>\n        {selectedOption &&\n          React.createElement(selectedOption.icon, {\n            value: selectedOption.value\n          })}\n\n        <div className={bem()}>\n          <Select\n            value={selectedOption}\n            className={bem(\"select\")}\n            options={fixedOptions}\n            onBlur={onBlur as any}\n            onFocus={onFocus as any}\n            onChange={this.onChange as any}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import block from \"bem-cn\";\nimport React, { InputHTMLAttributes, PureComponent } from \"react\";\nimport { Field } from \"react-final-form\";\nimport PhoneInput from \"react-phone-number-input\";\nimport { connect } from \"react-redux\";\nimport { RootState } from \"../../../store/reducer\";\nimport { PhoneNumberCountrySelect } from \"../phone-number-input-select/PhoneNumberCountrySelect\";\nimport \"./styles.scss\";\n\ntype PhoneNumberInputProps = {\n  name: string;\n  validate?: (value: string) => any;\n  errorMessage?: string;\n  country?: string;\n} & InputHTMLAttributes<HTMLInputElement>;\n\nconst mapStateToProps = (state: RootState) => {\n  return { country: state.app.countryCode };\n};\n\n@((connect as any)(mapStateToProps))\nexport class PhoneNumberInput extends PureComponent<PhoneNumberInputProps> {\n  private ref = React.createRef<any>();\n\n  componentDidMount(): void {\n    this.ref.current && this.ref.current.input.focus();\n  }\n\n  render() {\n    const { name, country } = this.props;\n\n    const bem = block(\"rt-phone-number-input\");\n\n    return (\n      <Field name={name}>\n        {({ input }) => {\n          return (\n            <PhoneInput\n              ref={this.ref}\n              value={input.value}\n              className={bem()}\n              inputClassName={bem(\"input\").toString()}\n              international={false}\n              country={country}\n              onChange={input.onChange}\n              countrySelectComponent={PhoneNumberCountrySelect as any}\n            />\n          );\n        }}\n      </Field>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport { Form } from \"react-final-form\";\nimport { FormattedMessage } from \"react-intl\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { SetPhoneNumberAction } from \"../../../store/auth/actions\";\nimport { AuthState } from \"../../../store/auth/reducer\";\nimport { RootState } from \"../../../store/reducer\";\nimport { Button } from \"../../common/button/Button\";\nimport { Logo } from \"../../common/logo/Logo\";\nimport { PhoneNumberInput } from \"../../forms/phone-number-input/PhoneNumberInput\";\nimport \"./styles.scss\";\n\ntype OwnProps = {};\n\ntype PhoneFormProps = AuthState & DispatchProps & OwnProps;\n\ntype DispatchProps = {\n  setPhoneNumber: typeof SetPhoneNumberAction;\n};\n\ntype FormValues = {\n  phone?: string;\n};\n\nconst mapStateToProps = (state: RootState): AuthState => {\n  return state.auth;\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return bindActionCreators(\n    {\n      setPhoneNumber: SetPhoneNumberAction\n    },\n    dispatch\n  );\n};\n\n@((connect as any)(mapStateToProps, mapDispatchToProps))\nclass ConnectedPhoneForm extends PureComponent<PhoneFormProps> {\n  onSubmit = ({ phone }: FormValues) => {\n    if (phone) {\n      this.props.setPhoneNumber(phone);\n    }\n  };\n\n  render() {\n    const { isFetching } = this.props;\n\n    return (\n      <Form onSubmit={this.onSubmit}>\n        {({ handleSubmit }) => {\n          return (\n            <form onSubmit={handleSubmit} className=\"rt-phone-form\">\n              <div className=\"rt-phone-form__header\">\n                <Logo\n                  title={\n                    <FormattedMessage\n                      id={\"components.phone-form.subtitle\"}\n                      defaultMessage={\"Welcome to the web application\"}\n                    />\n                  }\n                />\n              </div>\n\n              <div className=\"rt-phone-form__body\">\n                <PhoneNumberInput name={\"phone\"} />\n\n                <Button\n                  className=\"rt-phone-form__submit rt-button--primary\"\n                  loading={isFetching}>\n                  <FormattedMessage\n                    id={\"components.phone-form.submit\"}\n                    defaultMessage={\"Next\"}\n                  />\n                </Button>\n              </div>\n            </form>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport const PhoneForm = (ConnectedPhoneForm as unknown) as React.ComponentType<\n  OwnProps\n>;\n","import block from \"bem-cn\";\nimport React, { PureComponent } from \"react\";\nimport { AUTHORIZATION_STATES } from \"../../../store/telegram/types\";\nimport { CodeForm } from \"../code-form/CodeForm\";\nimport { PasswordForm } from \"../password-form/PasswordForm\";\nimport { PhoneForm } from \"../phone-form/PhoneForm\";\nimport \"./styles.scss\";\n\ntype LoginFormProps = {\n  state: any;\n  onSubmit: any;\n};\n\nexport class LoginForm extends PureComponent<LoginFormProps> {\n  render() {\n    const bem = block(\"rt-login-form\");\n\n    return <div className={bem()}>{this.renderForm()}</div>;\n  }\n\n  renderForm(): React.ReactNode {\n    const { state, onSubmit } = this.props;\n\n    switch (state) {\n      case AUTHORIZATION_STATES.PHONE_NUMBER: {\n        return <PhoneForm />;\n      }\n\n      case AUTHORIZATION_STATES.CODE: {\n        return <CodeForm />;\n      }\n\n      case AUTHORIZATION_STATES.PASSWORD: {\n        return <PasswordForm onSubmit={onSubmit} />;\n      }\n\n      default: {\n        return state;\n      }\n    }\n  }\n}\n","import block from \"bem-cn\";\nimport React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { FormattedMessage } from \"react-intl\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { AuthState } from \"../../../store/auth/reducer\";\nimport { RootState } from \"../../../store/reducer\";\nimport { SendMessageAction } from \"../../../store/telegram/actions\";\nimport { LoginForm } from \"../../auth/login-form/LoginForm\";\nimport \"./styles.scss\";\n\ntype OwnProps = {};\ntype DispatchProps = { sendMessage: typeof SendMessageAction };\ntype LoginProps = OwnProps & Partial<AuthState & DispatchProps>;\n\n@((connect as any)(mapStateToProps, mapDispatchToProps))\nexport class Login extends Component<LoginProps> {\n  render() {\n    const bem = block(\"rt-login\");\n\n    const { authState, isAuthorized, sendMessage } = this.props;\n\n    if (isAuthorized) {\n      return <Redirect to={\"/\"} />;\n    }\n\n    return (\n      <div className={bem()}>\n        <FormattedMessage\n          id={\"common.pages.login.title\"}\n          defaultMessage={\"Telegram | Sign in\"}>\n          {(title) => (\n            <Helmet>\n              <title>{title}</title>\n            </Helmet>\n          )}\n        </FormattedMessage>\n\n        <div className={bem(\"body\")}>\n          <LoginForm state={authState} onSubmit={sendMessage} />\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return bindActionCreators({ sendMessage: SendMessageAction }, dispatch);\n}\n\nfunction mapStateToProps(state: RootState): AuthState {\n  return state.auth;\n}\n","import React, { PureComponent } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { LogoutButton } from \"../../auth/logout-button/LogoutButton\";\n\nexport class Messenger extends PureComponent {\n  render() {\n    return (\n      <div>\n        <FormattedMessage\n          id={\"common.pages.messenger.title\"}\n          defaultMessage={\"Telegram\"}>\n          {(title) => (\n            <Helmet>\n              <title>{title}</title>\n            </Helmet>\n          )}\n        </FormattedMessage>\n\n        <LogoutButton />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect, Route, RouteProps } from \"react-router-dom\";\n\nimport { AppLoading } from \"./app-loading/AppLoading\";\nimport { RootState } from \"../../store/reducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return state;\n};\n\nexport const PrivateRoute: React.ComponentType<RouteProps> = connect(\n  mapStateToProps\n)((props: RouteProps & RootState) => {\n  const { component, telegram, auth, app, ...restProps } = props;\n\n  const Component: React.ComponentType<any> = component as any;\n\n  return (\n    <Route\n      {...restProps}\n      render={(props) => {\n        if (!telegram.isReady || app.fetching) {\n          return <AppLoading />;\n        }\n\n        if (!auth.isAuthorized) {\n          return <Redirect to={\"/login\"} />;\n        }\n\n        return <Component {...props} />;\n      }}\n    />\n  );\n}) as any;\n","import { createAction } from \"typesafe-actions\";\nimport {\n  GET_COUNTRY_CODE,\n  GET_COUNTRY_CODE_FAILURE,\n  GET_COUNTRY_CODE_SUCCESS\n} from \"./types\";\n\nexport const GetCountryCodeAction = createAction(GET_COUNTRY_CODE);\nexport const GetCountryCodeSuccessAction = createAction(\n  GET_COUNTRY_CODE_SUCCESS,\n  (action) => (countryCode: string) => action({ countryCode })\n);\nexport const GetCountryCodeFailureAction = createAction(\n  GET_COUNTRY_CODE_FAILURE\n);\n","export const GET_COUNTRY_CODE = \"@rt/app/get-country-code/fetching\";\nexport const GET_COUNTRY_CODE_SUCCESS = \"@rt/app/get-country-code/success\";\nexport const GET_COUNTRY_CODE_FAILURE = \"@rt/app/get-country-code/failure\";\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Switch } from \"react-router\";\nimport \"./assets/styles/main.scss\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { AppRoute } from \"./components/pages/AppRoute\";\nimport { Login } from \"./components/pages/login/Login\";\nimport { Messenger } from \"./components/pages/messenger/Messenger\";\nimport { PrivateRoute } from \"./components/pages/PrivateRoute\";\nimport { GetCountryCodeAction } from \"./store/app/actions\";\nimport { AppState } from \"./store/app/reducer\";\nimport { RootState } from \"./store/reducer\";\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return bindActionCreators(\n    {\n      getCountryCode: GetCountryCodeAction\n    },\n    dispatch\n  );\n};\n\nconst mapStateToProps = (state: RootState): AppState => {\n  return state.app;\n};\n\ntype OwnProps = {};\n\ntype DispatchProps = {\n  getCountryCode: typeof GetCountryCodeAction;\n};\n\ntype AppProps = OwnProps & Partial<DispatchProps> & Partial<AppState>;\n\n@((connect as any)(mapStateToProps, mapDispatchToProps, null, { pure: false }))\nexport class App extends Component<AppProps> {\n  constructor(props: AppProps) {\n    super(props);\n\n    if (!props.countryCode) {\n      props.getCountryCode && props.getCountryCode();\n    }\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div className=\"rt-app\">\n        <Switch>\n          <AppRoute path={\"/login\"} exact={true} component={Login} />\n\n          <PrivateRoute path=\"/\" component={Messenger} />\n        </Switch>\n      </div>\n    );\n  }\n}\n","import { IntlProvider, addLocaleData } from \"react-intl\";\nimport { connect } from \"react-redux\";\nimport * as en from \"react-intl/locale-data/en\";\n\naddLocaleData([...en]);\n\nexport const messages = {\n  en: require(\"../../../locales/en.json\")\n};\n\nexport const TextComponent = (props: any) => {\n  return props.children;\n};\n\nfunction mapStateToProps(): any {\n  const locale = \"en\";\n\n  return {\n    locale,\n    messages: { ...messages.en, ...messages[locale] }\n  };\n}\n\nexport const ConnectedIntlProvider = connect(mapStateToProps)(IntlProvider);\n","import { IEnvironment } from \"./environment\";\n\nconst apiId = process.env.REACT_APP_TELEGRAM_API_ID;\nconst apiHash = process.env.REACT_APP_TELEGRAM_API_HASH;\n\nif (!apiId || !apiHash) {\n  throw new Error(\"api_id and api_hash are not defined\");\n}\n\nexport const environmentDefault: IEnvironment = {\n  apiId,\n  apiHash,\n  isLoggerEnabled: true,\n  useTestDC: !process.env.REACT_APP_TELEGRAM_PRODUCTION_DC\n};\n","import { IEnvironment } from \"./environment\";\nimport { environmentDefault } from \"./environmentDefault\";\n\nexport const environmentProduction: IEnvironment = {\n  ...environmentDefault,\n  isLoggerEnabled: false\n};\n","import { environmentDefault } from \"./environmentDefault\";\nimport { environmentProduction } from \"./environmentProduction\";\n\nexport interface IEnvironment {\n  apiId: string;\n  apiHash: string;\n  isLoggerEnabled: boolean;\n  useTestDC: boolean;\n}\n\nexport let environment: IEnvironment = {\n  ...environmentDefault\n};\n\nif (process.env.NODE_ENV === \"production\") {\n  environment = {\n    ...environmentProduction\n  };\n}\n","import { ActionType, getType } from \"typesafe-actions\";\nimport * as actions from \"./actions\";\n\nexport type AppAction = ActionType<typeof actions>;\n\nexport type AppState = {\n  fetching: boolean;\n  countryCode: Nullable<string>;\n};\n\nconst initialState: AppState = {\n  fetching: false,\n  countryCode: \"US\"\n};\n\nexport const appReducer = (\n  state = initialState,\n  action: AppAction\n): AppState => {\n  switch (action.type) {\n    case getType(actions.GetCountryCodeAction): {\n      return {\n        ...state,\n        fetching: true\n      };\n    }\n\n    case getType(actions.GetCountryCodeSuccessAction): {\n      const countryCode = action.payload.countryCode.toUpperCase();\n\n      return {\n        ...state,\n        fetching: false,\n        countryCode: countryCode || initialState.countryCode\n      };\n    }\n\n    case getType(actions.GetCountryCodeFailureAction): {\n      return {\n        ...state,\n        fetching: false\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import { ActionType, getType } from \"typesafe-actions\";\nimport * as telegramActions from \"../telegram/actions\";\nimport { TelegramAction } from \"../telegram/reducer\";\nimport {\n  AUTHORIZATION_STATES,\n  TELEGRAM_MESSAGE_TYPES\n} from \"../telegram/types\";\nimport * as actions from \"./actions\";\n\nexport type AuthState = {\n  readonly isAuthorized: boolean;\n  readonly isFetching: boolean;\n  readonly error: Nullable<any>;\n  readonly authState: Nullable<string>;\n  readonly isRegistered: boolean;\n  readonly data?: any;\n};\n\nexport type AuthAction = ActionType<typeof actions>;\n\nconst initialState: AuthState = {\n  isAuthorized: false,\n  isRegistered: false,\n  isFetching: false,\n  error: null,\n  authState: null\n};\n\nexport const authReducer = (\n  state = initialState,\n  action: AuthAction | TelegramAction\n): AuthState => {\n  switch (action.type) {\n    case getType(actions.LogoutAction): {\n      return {\n        ...state,\n        isFetching: true\n      };\n    }\n\n    case getType(actions.LogoutSuccessAction): {\n      return {\n        ...state,\n        isFetching: false,\n        isAuthorized: false\n      };\n    }\n\n    case getType(actions.LogoutFailureAction): {\n      return {\n        ...state,\n        isFetching: false\n      };\n    }\n\n    case getType(actions.LoginSuccessAction): {\n      return {\n        ...state,\n        isAuthorized: true\n      };\n    }\n\n    case getType(actions.SetCodeAction):\n    case getType(actions.SetPhoneNumberAction): {\n      return {\n        ...state,\n        isFetching: true\n      };\n    }\n\n    case getType(actions.SetCodeSuccessAction):\n    case getType(actions.SetPhoneNumberSuccessAction): {\n      return {\n        ...state,\n        isFetching: false\n      };\n    }\n\n    case getType(actions.SetCodeFailureAction):\n    case getType(actions.SetPhoneNumberFailureAction): {\n      return {\n        ...state,\n        isFetching: false\n      };\n    }\n\n    case getType(telegramActions.ReceiveMessageAction): {\n      const message = action.payload.data;\n\n      if (\n        message[\"@type\"] === TELEGRAM_MESSAGE_TYPES.UPDATE_AUTHORIZATION_STATE\n      ) {\n        switch (message.authorization_state[\"@type\"]) {\n          case AUTHORIZATION_STATES.CODE: {\n            return {\n              ...state,\n              data: message.authorization_state.code_info,\n              isRegistered: message.authorization_state.is_registered,\n              authState: message.authorization_state[\"@type\"],\n              isFetching: false\n            };\n          }\n\n          default: {\n            return {\n              ...state,\n              authState: message.authorization_state[\"@type\"]\n            };\n          }\n        }\n      }\n\n      return state;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import { ActionType, getType } from \"typesafe-actions\";\nimport * as actions from \"./actions\";\nimport {\n  TELEGRAM_CONNECTION_STATE,\n  TELEGRAM_MESSAGE_TYPES,\n  TelegramOptions\n} from \"./types\";\n\nexport type TelegramState = {\n  readonly isConnecting: boolean;\n  readonly isReady: boolean;\n  readonly options: Partial<TelegramOptions>;\n};\n\nexport type TelegramAction = ActionType<typeof actions>;\n\nconst initialState: TelegramState = {\n  isConnecting: true,\n  isReady: false,\n  options: {}\n};\n\nexport const telegramReducer = (\n  state = initialState,\n  action: TelegramAction\n): TelegramState => {\n  switch (action.type) {\n    case getType(actions.ReceiveMessageAction): {\n      const message = action.payload.data;\n\n      switch (message[\"@type\"]) {\n        case TELEGRAM_MESSAGE_TYPES.UPDATE_CONNECTION_STATE: {\n          switch (message.state[\"@type\"]) {\n            case TELEGRAM_CONNECTION_STATE.CONNECTING: {\n              return {\n                ...state,\n                isConnecting: true\n              };\n            }\n\n            case TELEGRAM_CONNECTION_STATE.READY: {\n              return {\n                ...state,\n                isConnecting: false\n              };\n            }\n\n            default: {\n              return state;\n            }\n          }\n        }\n\n        case TELEGRAM_MESSAGE_TYPES.READY: {\n          if (\n            message[\"@extra\"] &&\n            message[\"@extra\"][\"@type\"] === \"setTdlibParameters\"\n          ) {\n            return {\n              ...state,\n              isReady: true\n            };\n          }\n\n          return state;\n        }\n\n        case TELEGRAM_MESSAGE_TYPES.UPDATE_OPTION: {\n          const { options } = state;\n\n          options[message.name] = message.value.value;\n\n          return {\n            ...state,\n            options: options\n          };\n        }\n\n        default: {\n          return state;\n        }\n      }\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { StateType } from \"typesafe-actions\";\nimport { appReducer } from \"./app/reducer\";\nimport { authReducer } from \"./auth/reducer\";\nimport { telegramReducer } from \"./telegram/reducer\";\n\nexport const rootReducer = combineReducers({\n  app: appReducer,\n  auth: authReducer,\n  telegram: telegramReducer\n});\n\nexport type RootState = StateType<typeof rootReducer>;\n","export class GeoApiService {\n  static getCountryCode() {\n    return fetch(\"https://ip.nf/me.json\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        return data.ip.country_code;\n      });\n  }\n}\n","import { all, put, takeEvery } from \"redux-saga/effects\";\nimport { getType } from \"typesafe-actions\";\nimport { GeoApiService } from \"../../services/GeoApiService\";\nimport * as actions from \"./actions\";\n\nfunction* getCountryCode() {\n  try {\n    const countryCode = yield GeoApiService.getCountryCode();\n\n    yield put(actions.GetCountryCodeSuccessAction(countryCode));\n  } catch {\n    yield put(actions.GetCountryCodeFailureAction());\n  }\n}\n\nexport function* appSaga() {\n  yield all([takeEvery(getType(actions.GetCountryCodeAction), getCountryCode)]);\n}\n","import { all, takeEvery, call, put } from \"redux-saga/effects\";\nimport { eventChannel } from \"redux-saga\";\nimport { getType } from \"typesafe-actions\";\nimport uuid from \"uuid\";\n\nimport { AUTHORIZATION_STATES } from \"./types\";\nimport {\n  ReceiveMessageAction,\n  SendMessageAction,\n  SendMessageFailureAction,\n  SendMessageSuccessAction\n} from \"./actions\";\n\nconst TelegramWorker = require(\"../../services/telegram.worker\");\n\nlet worker: any;\n\nconst promises = new Map<\n  string,\n  {\n    resolve: any;\n    reject: any;\n  }\n>();\n\nfunction createWorker() {\n  worker = new TelegramWorker();\n\n  return eventChannel((emit: any) => {\n    worker.onmessage = (event: any) => {\n      emit(\n        ReceiveMessageAction({\n          data: event.data\n        })\n      );\n    };\n\n    return worker.terminate;\n  });\n}\n\nfunction* subscribeToTelegramWorker() {\n  const channel = yield createWorker();\n\n  yield takeEvery(channel, dispatchMessage);\n}\n\nfunction* dispatchMessage(action: any) {\n  const message = action.payload.data;\n\n  console.log(message);\n\n  if (message && message[\"@extra\"]) {\n    const { messageId } = message[\"@extra\"];\n    const promise = promises.get(messageId);\n\n    if (promise) {\n      if (message[\"@type\"] === \"error\") {\n        promise.reject(action);\n      } else {\n        promise.resolve(action);\n      }\n    }\n  }\n\n  return yield put(action);\n}\n\nfunction* sendMessage(action: any) {\n  if (!worker) {\n    throw new Error(\"Worker is not yet ready\");\n  }\n\n  try {\n    yield asyncSendMessage(action.payload);\n\n    put(SendMessageSuccessAction());\n  } catch {\n    put(SendMessageFailureAction());\n  }\n}\n\nexport const asyncSendMessage = (message: any): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    const id = uuid.v4();\n\n    promises.set(id, {\n      resolve,\n      reject\n    });\n\n    worker.postMessage({\n      type: \"send\",\n      payload: {\n        ...message,\n        \"@extra\": {\n          messageId: id\n        }\n      }\n    });\n  });\n};\n\nfunction loadInitialData(action: any) {\n  switch (action.payload.data[\"@type\"]) {\n    case \"updateAuthorizationState\": {\n      if (\n        action.payload.data.authorization_state[\"@type\"] ===\n        AUTHORIZATION_STATES.AUTHORIZED\n      ) {\n        worker.postMessage({\n          type: \"send\",\n          payload: {\n            \"@type\": \"setOption\",\n            name: \"online\",\n            value: {\n              \"@type\": \"optionValueBoolean\",\n              value: true\n            }\n          }\n        });\n      }\n    }\n  }\n}\n\nexport function* telegramSaga() {\n  return yield all([\n    call(subscribeToTelegramWorker),\n    takeEvery(getType(ReceiveMessageAction), loadInitialData),\n    takeEvery(getType(SendMessageAction), sendMessage)\n  ]);\n}\n","import { all, put, takeEvery } from \"redux-saga/effects\";\nimport { ActionType, getType } from \"typesafe-actions\";\nimport { ReceiveMessageAction } from \"../telegram/actions\";\nimport { asyncSendMessage } from \"../telegram/saga\";\nimport {\n  AUTHORIZATION_STATES,\n  TELEGRAM_MESSAGE_TYPES\n} from \"../telegram/types\";\nimport * as actions from \"./actions\";\n\nfunction* updateAuthorization(action: ActionType<typeof ReceiveMessageAction>) {\n  switch (action.payload.data[\"@type\"]) {\n    case TELEGRAM_MESSAGE_TYPES.UPDATE_AUTHORIZATION_STATE: {\n      const message = action.payload.data;\n\n      if (\n        message.authorization_state[\"@type\"] === AUTHORIZATION_STATES.AUTHORIZED\n      ) {\n        yield put(actions.LoginSuccessAction());\n      }\n\n      break;\n    }\n\n    default: {\n      console.log(\"skip...\");\n    }\n  }\n}\n\nfunction* logout() {\n  try {\n    yield asyncSendMessage({\n      \"@type\": \"logOut\"\n    });\n\n    yield put(actions.LogoutSuccessAction());\n  } catch {\n    yield put(actions.LogoutFailureAction());\n  }\n}\n\nfunction* setPhoneNumber(\n  action: ReturnType<typeof actions.SetPhoneNumberAction>\n): Generator {\n  try {\n    yield asyncSendMessage({\n      \"@type\": \"setAuthenticationPhoneNumber\",\n      phone_number: action.payload.phone\n    });\n\n    yield put(actions.SetPhoneNumberSuccessAction());\n  } catch (e) {\n    yield put(actions.SetPhoneNumberFailureAction());\n  }\n}\n\nfunction* setCode(action: ReturnType<typeof actions.SetCodeAction>): Generator {\n  try {\n    yield asyncSendMessage({\n      \"@type\": \"checkAuthenticationCode\",\n      code: action.payload.code\n    });\n\n    yield put(actions.SetCodeSuccessAction());\n  } catch (error) {\n    yield put(actions.SetCodeFailureAction());\n  }\n}\n\nfunction* resendCode(): Generator {\n  try {\n    yield asyncSendMessage({\n      \"@type\": \"resendAuthenticationCode\"\n    });\n\n    yield put(actions.ResendCodeSuccessAction());\n  } catch (error) {\n    yield put(actions.ResendCodeFailureAction());\n  }\n}\n\nexport function* authSaga() {\n  return yield all([\n    takeEvery(getType(ReceiveMessageAction), updateAuthorization),\n    takeEvery(getType(actions.SetPhoneNumberAction), setPhoneNumber),\n    takeEvery(getType(actions.SetCodeAction), setCode),\n    takeEvery(getType(actions.ResendCodeAction), resendCode),\n    takeEvery(getType(actions.LogoutAction), logout)\n  ]);\n}\n","import { all, call } from \"redux-saga/effects\";\nimport { appSaga } from \"./app/saga\";\nimport { authSaga } from \"./auth/saga\";\nimport { telegramSaga } from \"./telegram/saga\";\n\nexport function* rootSaga() {\n  return yield all([call(appSaga), call(telegramSaga), call(authSaga)]);\n}\n","import { applyMiddleware, createStore } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport { environment } from \"../config/environment\";\nimport { rootReducer } from \"./reducer\";\nimport { rootSaga } from \"./saga\";\n\nconst logger = createLogger({\n  predicate: () => environment.isLoggerEnabled\n});\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const configureStore = (preloadedState = {}) => {\n  const store = createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(logger, sagaMiddleware)\n  );\n\n  let sagaTask = sagaMiddleware.run(rootSaga);\n\n  if ((module as any).hot) {\n    (module as any).hot.accept(\"./reducer\", () => {\n      const nextRootReducer = require(\"./reducer\");\n      store.replaceReducer(nextRootReducer);\n    });\n\n    (module as any).hot.accept(\"./saga\", () => {\n      const nextRootSaga = require(\"./saga\");\n\n      sagaTask.cancel();\n\n      sagaTask.done.then(() => {\n        sagaTask = sagaMiddleware.run(nextRootSaga);\n      });\n    });\n  }\n\n  return store;\n};\n","import React, { ComponentClass } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport { App } from \"./App\";\nimport {\n  ConnectedIntlProvider,\n  TextComponent\n} from \"./components/common/connected-intl-provider/ConnectedIntlProvider\";\n\nimport { configureStore } from \"./store/configureStore\";\n\nimport { enableTabMode } from \"./utils/enableTabMode\";\n\nconst rootElement = document.getElementById(\"root\");\nconst AppStore = configureStore();\n\nconst render = (Component: ComponentClass) => {\n  ReactDOM.render(\n    <Provider store={AppStore}>\n      <ConnectedIntlProvider textComponent={TextComponent}>\n        <HashRouter>\n          <Component />\n        </HashRouter>\n      </ConnectedIntlProvider>\n    </Provider>,\n    rootElement\n  );\n};\n\nrender(App);\n\nif ((module as any).hot) {\n  (module as any).hot.accept(\"./App\", () => {\n    const NextApp = require(\"./App\").App;\n\n    render(NextApp);\n  });\n}\n\nenableTabMode();\n","export const enableTabMode = () => {\n  const TAB_MODE_CLASSNAME = \"rt-tab-mode\";\n\n  document.addEventListener(\"keydown\", (event: KeyboardEvent) => {\n    if (event.key === \"Tab\") {\n      document.body.classList.add(TAB_MODE_CLASSNAME);\n    }\n\n    document.addEventListener(\"mousemove\", onMouseMove);\n  });\n\n  function onMouseMove(): void {\n    document.body.classList.remove(TAB_MODE_CLASSNAME);\n\n    document.removeEventListener(\"mousemove\", onMouseMove);\n  }\n};\n"],"sourceRoot":""}