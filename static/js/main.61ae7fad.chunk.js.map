{"version":3,"sources":["store/sagas/telegramSaga.ts","store/connect.ts","utils/actionType.ts","store/actions/telegramActions.ts","store/reducers/appReducer.ts","store/actions/authActions.ts","components/common/button/Button.tsx","components/auth/logout-button/LogoutButton.tsx","components/pages/messenger/Messenger.tsx","components/forms/input/Input.tsx","components/auth/phone-form/PhoneForm.tsx","components/auth/code-form/CodeForm.tsx","components/auth/password-form/PasswordForm.tsx","components/auth/login-form/LoginForm.tsx","components/pages/login/Login.tsx","assets/icons/logo.svg","components/common/icons/LogoIcon.tsx","utils/makeIcon.tsx","components/pages/app-loading/AppLoading.tsx","components/pages/PrivateRoute.tsx","components/pages/AppRoute.tsx","App.tsx","components/common/connected-intl-provider/ConnectedIntlProvider.ts","config/environmentDefault.ts","config/environmentProduction.ts","config/environment.ts","store/sagas/rootSaga.ts","store/reducers/rootReducer.ts","index.tsx","store/configureStore.ts","config/appHistory.ts","services/telegram.worker.ts"],"names":["worker","connect","originalConnect","types","actionType","action","toUpperCase","includes","Error","concat","push","SUCCESS","FAILURE","FETCHING","TelegramMessageReceivedActionType","TelegramMessageSendActionType","sendMessage","message","dispatch","type","payload","AUTHORIZATION_STATES","PHONE_NUMBER","CODE","PASSWORD","AUTHORIZED","LOGGING_OUT","LOADING","initialState","ready","connecting","authState","appReducer","state","arguments","length","undefined","data","Object","objectSpread","authorization_state","subscribeToTelegramWorker","dispatchMessage","telegramSaga","TelegramWorker","require","channel","regenerator_default","a","wrap","_context","prev","next","eventChannel","emit","onmessage","event","terminate","sent","takeEvery","stop","_marked","this","_context2","put","abrupt","_marked2","postMessage","asyncSendMessage","Promise","resolve","reject","addEventListener","onMessageReceived","removeEventListener","loadInitialData","@type","name","value","_context3","all","call","_marked3","LogoutActionTypes","logout","then","console","log","Button","_PureComponent","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","key","_this$props","props","className","restProps","objectWithoutProperties","rootClassNames","classNames","defineProperty","rt-btn","react_default","createElement","assign","children","PureComponent","LogoutButton","bindActionCreators","Button_Button","onClick","Messenger","Input","errorMessage","validate","react_final_form_es","_ref","input","meta","hasError","touched","error","PhoneForm","_getPrototypeOf2","_this","_len","args","Array","_key","onSubmit","values","handleSubmit","Input_Input","CodeForm","catch","sendViaSms","_this2","PasswordForm","LoginForm","renderForm","PhoneForm_PhoneForm","CodeForm_CodeForm","PasswordForm_PasswordForm","Login","app","Redirect","to","index_es","id","defaultMessage","title","Helmet","LoginForm_LoginForm","Component","symbol","browser_symbol_default","use","viewBox","content","logo","browser_sprite_build_default","add","LogoIcon","iconId","focusable","xlinkHref","makeIcon","TelegramLogo","AppLoading","LogoIcon_LogoIcon","PrivateRoute","component","Route","render","AppLoading_AppLoading","es_Redirect","AppRoute","App","_Component","Switch","path","exact","addLocaleData","toConsumableArray","en","messages","TextComponent","ConnectedIntlProvider","locale","IntlProvider","apiHash","process","environmentDefault","apiId","isLoggerEnabled","environmentProduction","environment","rootSaga","rootSaga_marked","rootReducer","combineReducers","logger","createLogger","predicate","sagaMiddleware","createSagaMiddleware","AppHistory","createBrowserHistory","rootElement","document","getElementById","AppStore","preloadedState","store","createStore","applyMiddleware","thunk","run","configureStore","ReactDOM","es","textComponent","Router","history","module","exports","Worker","__webpack_require__","p"],"mappings":"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","file":"static/js/main.61ae7fad.chunk.js","sourcesContent":["import { all, takeEvery, call, put } from 'redux-saga/effects';\nimport { eventChannel } from 'redux-saga';\n\nimport { TelegramMessageReceivedActionType, TelegramMessageSendActionType } from '../actions/telegramActions';\nimport { AUTHORIZATION_STATES } from '../reducers/appReducer';\n\nconst TelegramWorker = require('../../services/telegram.worker');\n\nlet worker: any;\n\nfunction createWorker () {\n  worker = new TelegramWorker();\n  \n  return eventChannel((emit: any) => {\n    worker.onmessage = (event: any) => {\n      emit({\n        type: TelegramMessageReceivedActionType.SUCCESS,\n        payload: {\n          data: event.data,\n        }\n      });\n    };\n    \n    return worker.terminate;\n  });\n}\n\nfunction* subscribeToTelegramWorker () {\n  const channel = yield createWorker();\n  \n  yield takeEvery(channel, dispatchMessage);\n}\n\nfunction* dispatchMessage (action: any) {\n  return yield put(action);\n}\n\nfunction sendMessage (action: any) {\n  if (!worker) {\n    throw new Error('Worker is not yet ready');\n  }\n  \n  worker.postMessage({\n    type: 'send',\n    payload: action.payload,\n  });\n}\n\nexport const asyncSendMessage = (message: any): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    const onMessageReceived = (event: any) => {\n      worker.removeEventListener('message', onMessageReceived);\n      \n      if (event.data['@type'] === 'error') {\n        return reject(event.data);\n      }\n      \n      return resolve(event.data);\n    };\n    \n    worker.addEventListener('message', onMessageReceived);\n  \n    worker.postMessage({\n      type: 'send',\n      payload: message,\n    });\n  });\n};\n\nfunction loadInitialData (action: any) {\n  switch (action.payload.data['@type']) {\n    case 'updateAuthorizationState': {\n      if (action.payload.data.authorization_state['@type'] === AUTHORIZATION_STATES.AUTHORIZED) {\n        worker.postMessage({\n          type: 'send',\n          payload: {\n            '@type': 'setOption',\n            name: 'online',\n            value: {\n              '@type': 'optionValueBoolean',\n              value: true,\n            },\n          }\n        });\n      }\n    }\n  }\n}\n\nexport function* telegramSaga () {\n  return yield all([\n    call(subscribeToTelegramWorker),\n    takeEvery(TelegramMessageReceivedActionType.SUCCESS, loadInitialData),\n    takeEvery(TelegramMessageSendActionType.SUCCESS, sendMessage)\n  ]);\n}\n","import React from 'react';\nimport {\n  connect as originalConnect,\n  MapDispatchToPropsParam,\n  MapStateToPropsParam,\n  MergeProps,\n  Options,\n} from 'react-redux';\n\nimport { RootState } from './reducers/rootReducer';\n\nexport type InferableComponentEnhancerWithProps<IInjectedProps, INeedsProps> =\n  <IComponent extends React.ComponentType<IInjectedProps & INeedsProps>>(component: IComponent) => IComponent\n\nexport interface IConnect {\n  <IStateProps = {}, IDispatchProps = {}, IOwnProps = {}> (\n    mapStateToProps?: MapStateToPropsParam<IStateProps, IOwnProps, RootState>,\n    mapDispatchToProps?: MapDispatchToPropsParam<IDispatchProps, IOwnProps>,\n  ): InferableComponentEnhancerWithProps<IStateProps & IDispatchProps, IOwnProps>\n  \n  <IStateProps = {}, IDispatchProps = {}, IOwnProps = {}, IMergedProps = {}> (\n    mapStateToProps?: MapStateToPropsParam<IStateProps, IOwnProps, RootState>,\n    mapDispatchToProps?: MapDispatchToPropsParam<IDispatchProps, IOwnProps>,\n    mergeProps?: MergeProps<IStateProps, IDispatchProps, IOwnProps, IMergedProps>,\n    options?: Options<IStateProps, IOwnProps, IMergedProps>,\n  ): InferableComponentEnhancerWithProps<IMergedProps, IOwnProps>\n  \n}\n\nexport const connect = originalConnect as IConnect;","const types: string[] = [];\n\nexport interface ActionType {\n  FETCHING: string;\n  SUCCESS: string;\n  FAILURE: string;\n}\n\nexport const actionType = (action: string): ActionType => {\n  const actionType = action.toUpperCase();\n  \n  if (types.includes(actionType)) {\n    throw new Error(`ActionType \"${actionType}\" already exists`);\n  }\n  \n  types.push(action);\n  \n  return {\n    SUCCESS: `${actionType}_SUCCESS`,\n    FAILURE: `${actionType}_FAILURE`,\n    FETCHING: `${actionType}_FETCHING`,\n  };\n};\n","import { actionType } from '../../utils/actionType';\n\nexport const TelegramMessageReceivedActionType = actionType('telegram-message-received');\nexport const TelegramMessageSendActionType     = actionType('telegram-message-send');\n\nexport const sendMessage = (message: any) => {\n  return (dispatch: any) => {\n    dispatch({\n      type: TelegramMessageSendActionType.SUCCESS,\n      payload: message,\n    });\n  }\n};\n\nexport interface TelegramActions  {\n  sendMessage: (message: any) => (dispatch: any) => void;\n}\n","import { TelegramMessageReceivedActionType } from '../actions/telegramActions';\n\nexport const AUTHORIZATION_STATES = {\n  PHONE_NUMBER: 'authorizationStateWaitPhoneNumber',\n  CODE: 'authorizationStateWaitCode',\n  PASSWORD: 'authorizationStateWaitPassword',\n  AUTHORIZED: 'authorizationStateReady',\n  LOGGING_OUT: 'authorizationStateLoggingOut',\n  LOADING: 'authorizationStateWaitEncryptionKey'\n};\n\nexport interface AppState {\n  ready: boolean;\n  authState: string;\n  connecting: boolean;\n}\n\nconst initialState: AppState = {\n  ready: false,\n  connecting: true,\n  authState: AUTHORIZATION_STATES.LOADING,\n};\n\nexport const appReducer = (state: AppState = initialState, action: any): AppState => {\n  switch (action.type) {\n    case TelegramMessageReceivedActionType.SUCCESS: {\n      switch (action.payload.data['@type']) {\n        case 'updateConnectionState': {\n          switch (action.payload.data.state['@type']) {\n            case 'connectionStateConnecting': {\n              return {\n                ...state,\n                connecting: true,\n              };\n            }\n            \n            case 'connectionStateReady': {\n              return {\n                ...state,\n                connecting: false,\n              };\n            }\n          }\n          \n          return state;\n        }\n        \n        case 'updateAuthorizationState': {\n          return {\n            ...state,\n            authState: action.payload.data.authorization_state['@type'],\n          };\n        }\n        \n        case 'ok': {\n          if (action.payload.data['@extra'] && action.payload.data['@extra']['@type'] === 'setTdlibParameters') {\n            return {\n              ...state,\n              ready: true,\n            };\n          } else {\n            return state;\n          }\n        }\n        \n        default: {\n          return state;\n        }\n      }\n    }\n    \n    default: {\n      return state;\n    }\n  }\n};\n","import { TelegramMessageSendActionType } from './telegramActions';\nimport { actionType } from '../../utils/actionType';\nimport { asyncSendMessage } from '../sagas/telegramSaga';\n\nconst LogoutActionTypes = actionType('logout');\n\nexport const logout = () => {\n  return (dispatch: any) => {\n    dispatch({\n      type: LogoutActionTypes.FETCHING,\n    });\n    \n    return asyncSendMessage({ '@type': 'logOut' })\n      .then((data) => {\n        console.log(data);\n      });\n  };\n};\n\nexport interface AuthActions {\n  logout: () => (dispatch: any) => void;\n}\n","import React, { ButtonHTMLAttributes, PureComponent } from 'react';\nimport classNames from 'classnames';\n\nimport './button.scss';\n\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport class Button extends PureComponent<ButtonProps> {\n  render () {\n    const { className, ...restProps } = this.props;\n    \n    const rootClassNames = classNames({\n      'rt-btn': true,\n      [className as string]: className,\n    });\n    \n    return (\n      <button { ...restProps }\n              className={ rootClassNames }>\n        { this.props.children }\n      </button>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { bindActionCreators } from 'redux';\n\nimport { connect } from '../../../store/connect';\nimport { AuthActions, logout } from '../../../store/actions/authActions';\n\nimport { Button } from '../../common/button/Button';\n\n@connect<{}, AuthActions>(null, mapDispatchToProps)\nclass LogoutButtonWrapper extends PureComponent<AuthActions> {\n  render () {\n    return (\n      <Button className='ri-logout-button'\n              onClick={ this.props.logout }>\n        Logout\n      </Button>\n    );\n  }\n}\n\nfunction mapDispatchToProps (dispatch: any) {\n  return bindActionCreators({ logout }, dispatch);\n}\n\nexport const LogoutButton: React.ComponentType = LogoutButtonWrapper as any;\n","import React, { PureComponent } from 'react';\n\nimport { LogoutButton } from '../../auth/logout-button/LogoutButton';\n\nexport class Messenger extends PureComponent {\n  render () {\n    return (\n      <div>\n        app ready\n        \n        <LogoutButton/>\n      </div>\n    );\n  }\n}\n","import React, { InputHTMLAttributes, PureComponent } from 'react';\nimport { Field } from 'react-final-form';\n\nimport './input.scss';\n\ntype InputProps = {\n  name: string;\n  validate?: (value: string) => any;\n  errorMessage?: string;\n} & InputHTMLAttributes<HTMLInputElement>;\n\nexport class Input extends PureComponent<InputProps> {\n  render (): React.ReactNode {\n    const { name, errorMessage, validate, ...restProps } = this.props;\n    \n    return (\n      <Field name={ name }\n             validate={ validate }>\n        { ({ input, meta }) => {\n          const hasError = meta.touched && meta.error;\n          \n          return (\n            <div className='rt-input'>\n              <input { ...input }\n                     { ...restProps }\n                     className='rt-input__input'/>\n              \n              { hasError && (\n                <div className='rt-input__error'>\n                  { errorMessage || meta.error }\n                </div>\n              ) }\n            </div>\n          );\n        } }\n      </Field>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { Form } from 'react-final-form';\n\nimport { Input } from '../../forms/input/Input';\n\ninterface PhoneFormProps {\n  onSubmit: (message: any) => void;\n}\n\nexport class PhoneForm extends PureComponent<PhoneFormProps> {\n  onSubmit = (values: any) => {\n    this.props.onSubmit({\n      '@type': 'setAuthenticationPhoneNumber',\n      ...values,\n    });\n  };\n  \n  render () {\n    return (\n      <Form onSubmit={ this.onSubmit }>\n        { ({ handleSubmit }) => {\n          return (\n            <form onSubmit={ handleSubmit } className='rt-phone-form'>\n              <h1>Enter phone number</h1>\n              \n              <Input name={ 'phone_number' }/>\n              \n              <button>submit</button>\n            </form>\n          );\n        } }\n      </Form>\n    );\n  }\n}","import React, { PureComponent } from 'react';\nimport { Form } from 'react-final-form';\nimport { Input } from '../../forms/input/Input';\nimport { asyncSendMessage } from '../../../store/sagas/telegramSaga';\n\ninterface CodeFormProps {\n  onSubmit: (message: any) => void;\n}\n\nexport class CodeForm extends PureComponent<CodeFormProps> {\n  onSubmit = (values: any) => {\n    asyncSendMessage({\n      '@type': 'checkAuthenticationCode',\n      ...values,\n    }).then((data) => {\n    })\n      .catch((error) => {\n      });\n  };\n  \n  sendViaSms = () => {\n    this.props.onSubmit({\n      '@type': 'resendAuthenticationCode',\n    });\n  };\n  \n  render () {\n    return (\n      <Form onSubmit={ this.onSubmit }>\n        { ({ handleSubmit }) => {\n          return (\n            <form onSubmit={ handleSubmit } className='rt-code-form'>\n              <h1>Enter code</h1>\n              \n              <Input name={ 'code' }/>\n              \n              <button type='button' onClick={ this.sendViaSms }>resend</button>\n              \n              <button>submit</button>\n            </form>\n          );\n        } }\n      </Form>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { Form } from 'react-final-form';\nimport { Input } from '../../forms/input/Input';\n\ninterface PasswordFormProps {\n  onSubmit: (message: any) => void;\n}\n\nexport class PasswordForm extends PureComponent<PasswordFormProps> {\n  onSubmit = (values: any) => {\n    this.props.onSubmit({\n      '@type': 'checkAuthenticationPassword',\n      ...values,\n    });\n  };\n  \n  render () {\n    return (\n      <Form onSubmit={ this.onSubmit }>\n        { ({ handleSubmit }) => {\n          return (\n            <form onSubmit={ handleSubmit } className='rt-password-form'>\n              <h1>Enter password</h1>\n              \n              <Input name={ 'password' }/>\n              \n              <button>submit</button>\n            </form>\n          );\n        } }\n      </Form>\n    );\n  }\n}","import React, { PureComponent } from 'react';\n\nimport { AUTHORIZATION_STATES } from '../../../store/reducers/appReducer';\n\nimport { PhoneForm } from '../phone-form/PhoneForm';\nimport { CodeForm } from '../code-form/CodeForm';\nimport { PasswordForm } from '../password-form/PasswordForm';\n\ninterface LoginFormProps {\n  state: string;\n  onSubmit: (message: any) => void;\n}\n\nexport class LoginForm extends PureComponent<LoginFormProps> {\n  render () {\n    return (\n      <div className='rt-login-form'>\n        { this.renderForm() }\n      </div>\n    );\n  }\n  \n  renderForm (): React.ReactNode {\n    const { state, onSubmit } = this.props;\n    \n    switch (state) {\n      case AUTHORIZATION_STATES.PHONE_NUMBER: {\n        return <PhoneForm onSubmit={ onSubmit }/>;\n      }\n      \n      case AUTHORIZATION_STATES.CODE: {\n        return <CodeForm onSubmit={ onSubmit }/>;\n      }\n      \n      case AUTHORIZATION_STATES.PASSWORD: {\n        return <PasswordForm onSubmit={ onSubmit }/>;\n      }\n      \n      default: {\n        return state;\n      }\n    }\n  }\n}\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\nimport { bindActionCreators } from 'redux';\nimport { FormattedMessage } from 'react-intl';\nimport { Helmet } from 'react-helmet';\n\nimport { connect } from '../../../store/connect';\nimport { RootState } from '../../../store/reducers/rootReducer';\nimport { AppState, AUTHORIZATION_STATES } from '../../../store/reducers/appReducer';\nimport { TelegramActions, sendMessage } from '../../../store/actions/telegramActions';\n\nimport { LoginForm } from '../../auth/login-form/LoginForm';\n\nimport './login.scss';\n\n@connect<AppState, TelegramActions>(mapStateToProps, mapDispatchToProps)\nclass LoginWrapper extends Component<AppState & TelegramActions> {\n  render () {\n    const { authState, sendMessage } = this.props;\n    \n    if (this.props.authState === AUTHORIZATION_STATES.AUTHORIZED) {\n      return <Redirect to={ '/' }/>;\n    }\n    \n    return (\n      <div className='rt-login'>\n        <FormattedMessage id={ 'common.pages.login.title' }\n                          defaultMessage={ 'Telegram | Sign in' }>\n          {\n            title => (\n              <Helmet>\n                <title>{ title }</title>\n              </Helmet>\n            )\n          }\n        </FormattedMessage>\n        \n        <LoginForm state={ authState }\n                   onSubmit={ sendMessage }/>\n      </div>\n    );\n  }\n}\n\nfunction mapDispatchToProps (dispatch: any) {\n  return bindActionCreators({ sendMessage }, dispatch);\n}\n\nfunction mapStateToProps (state: RootState): AppState {\n  return state.app;\n}\n\nexport const Login: React.ComponentType = LoginWrapper as any;","import SpriteSymbol from \"svg-baker-runtime/browser-symbol\";\nimport sprite from \"svg-sprite-loader/runtime/browser-sprite.build\";\nvar symbol = new SpriteSymbol({\n  \"id\": \"logo\",\n  \"use\": \"logo-usage\",\n  \"viewBox\": \"0 0 240 240\",\n  \"content\": \"<symbol xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 240 240\\\" id=\\\"logo\\\"><defs><linearGradient id=\\\"logo_a\\\" x1=\\\".667\\\" y1=\\\".167\\\" x2=\\\".417\\\" y2=\\\".75\\\"><stop stop-color=\\\"#37aee2\\\" offset=\\\"0\\\" /><stop stop-color=\\\"#1e96c8\\\" offset=\\\"1\\\" /></linearGradient><linearGradient id=\\\"logo_b\\\" x1=\\\".66\\\" y1=\\\".437\\\" x2=\\\".851\\\" y2=\\\".802\\\"><stop stop-color=\\\"#eff7fc\\\" offset=\\\"0\\\" /><stop stop-color=\\\"#fff\\\" offset=\\\"1\\\" /></linearGradient></defs><circle cx=\\\"120\\\" cy=\\\"120\\\" r=\\\"120\\\" fill=\\\"url(#logo_a)\\\" /><path fill=\\\"#c8daea\\\" d=\\\"m98 175c-3.8876 0-3.227-1.4679-4.5678-5.1695L82 132.2059 170 80\\\" /><path fill=\\\"#a9c9dd\\\" d=\\\"m98 175c3 0 4.3255-1.372 6-3l16-15.558-19.958-12.035\\\" /><path fill=\\\"url(#logo_b)\\\" d=\\\"m100.04 144.41 48.36 35.729c5.5185 3.0449 9.5014 1.4684 10.876-5.1235l19.685-92.763c2.0154-8.0802-3.0801-11.745-8.3594-9.3482l-115.59 44.571c-7.8901 3.1647-7.8441 7.5666-1.4382 9.528l29.663 9.2583 68.673-43.325c3.2419-1.9659 6.2173-0.90899 3.7752 1.2584\\\" /></symbol>\"\n});\nvar result = sprite.add(symbol);\nexport default symbol","import { makeIcon } from '../../../utils/makeIcon';\n\nimport TelegramLogo from '../../../assets/icons/logo.svg';\n\nexport const LogoIcon = ({ className }: { className?: string }) => makeIcon(TelegramLogo.id, className);","import React from 'react';\n\nexport const makeIcon = (iconId: string, className?: string) => {\n  return (\n    <svg className={ className }\n         focusable='false'>\n      <use xlinkHref={ `#${iconId}` }/>\n    </svg>\n  );\n};\n","import React, { PureComponent } from 'react';\n\nimport { LogoIcon } from '../../common/icons/LogoIcon';\n\nimport './app-loading.scss';\n\nexport class AppLoading extends PureComponent {\n  render () {\n    return (\n      <div className='rt-app-loading'>\n        <div className='rt-app-loading__body'>\n          <LogoIcon className='rt-app-loading__icon'/>\n\n          <div className='rt-app-loading__title'>\n            Telegram\n          </div>\n  \n          <div className='rt-app-loading__subtitle'>\n            a new era of messaging\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Redirect, Route, RouteProps } from 'react-router-dom';\n\nimport { RootState } from '../../store/reducers/rootReducer';\nimport { connect } from '../../store/connect';\n\nimport { AppLoading } from './app-loading/AppLoading';\n\nimport { AUTHORIZATION_STATES } from '../../store/reducers/appReducer';\n\nexport const PrivateRoute: React.ComponentType<RouteProps> = connect(mapStateToProps)((props: RouteProps & RootState) => {\n  const { component, app, ...restProps } = props;\n  \n  const Component: React.ComponentType<any> = component as any;\n  \n  return <Route { ...restProps }\n                render={ (props => {\n                  if (app.authState === AUTHORIZATION_STATES.LOADING) {\n                    return (<AppLoading/>);\n                  }\n    \n                  if (app.authState !== AUTHORIZATION_STATES.AUTHORIZED) {\n                    return <Redirect to={ '/login' }/>;\n                  }\n    \n                  return <Component { ...props }/>;\n                }) }/>;\n}) as any;\n\n\nfunction mapStateToProps (state: RootState) {\n  return {\n    app: state.app,\n  };\n}\n","import React from 'react';\nimport { Route, RouteProps } from 'react-router-dom';\n\nimport { RootState } from '../../store/reducers/rootReducer';\nimport { connect } from '../../store/connect';\n\nimport { AppLoading } from './app-loading/AppLoading';\n\n\nexport const AppRoute: React.ComponentType<RouteProps> = connect(mapStateToProps)((props: RouteProps & RootState) => {\n  const { component, app, ...restProps } = props;\n  \n  const Component: React.ComponentType<any> = component as any;\n  \n  return <Route { ...restProps }\n                render={ (props => {\n                  if (!app.ready) {\n                    return (<AppLoading/>);\n                  }\n                  \n    \n                  return <Component { ...props }/>;\n                }) }/>;\n}) as any;\n\n\nfunction mapStateToProps (state: RootState) {\n  return {\n    app: state.app,\n  };\n}\n","import React, { Component } from 'react';\nimport { Switch } from 'react-router';\n\nimport { Messenger } from './components/pages/messenger/Messenger';\nimport { Login } from './components/pages/login/Login';\n\nimport './assets/styles/main.scss';\n\nimport { PrivateRoute } from './components/pages/PrivateRoute';\nimport { AppRoute } from './components/pages/AppRoute';\n\nexport class App extends Component {\n  render (): React.ReactNode {\n    return (\n      <div className='rt-app'>\n        <Switch>\n          <AppRoute path={ '/login' } exact={ true } component={ Login }/>\n          \n          <PrivateRoute path='/' component={ Messenger }/>\n        </Switch>\n      </div>\n    );\n  }\n}\n","import { IntlProvider, addLocaleData } from 'react-intl';\nimport { connect } from 'react-redux';\nimport * as en from 'react-intl/locale-data/en';\n\naddLocaleData([...en]);\n\nexport const messages = {\n  en: require('../../../locales/en.json'),\n};\n\nexport const TextComponent = (props: any) => {\n  return props.children;\n};\n\nfunction mapStateToProps (): any {\n  const locale = 'en';\n\n  return {\n    locale,\n    messages: { ...messages.en, ...messages[locale] },\n  };\n}\n\nexport const ConnectedIntlProvider = connect(mapStateToProps)(IntlProvider);\n","import { IEnvironment } from './environment';\n\nconst apiId   = process.env.REACT_APP_TELEGRAM_API_ID;\nconst apiHash = process.env.REACT_APP_TELEGRAM_API_HASH;\n\nif (!apiId || !apiHash) {\n  throw new Error('api_id and api_hash are not defined');\n}\n\nexport const environmentDefault: IEnvironment = {\n  apiId,\n  apiHash,\n  isLoggerEnabled: true,\n};","import { IEnvironment } from './environment';\nimport { environmentDefault } from './environmentDefault';\n\nexport const environmentProduction: IEnvironment = {\n  ...environmentDefault,\n  isLoggerEnabled: false,\n};","import { environmentDefault } from './environmentDefault';\nimport { environmentProduction } from './environmentProduction';\n\nexport interface IEnvironment {\n  apiId: string;\n  apiHash: string;\n  isLoggerEnabled: boolean;\n}\n\nexport let environment: IEnvironment = {\n  ...environmentDefault,\n};\n\nif (process.env.NODE_ENV === 'production') {\n  environment = {\n    ...environmentProduction,\n  };\n}\n","import { all, call } from 'redux-saga/effects';\n\nimport { telegramSaga } from './telegramSaga';\n\nexport function* rootSaga (): any {\n  return yield all([\n    call(telegramSaga)\n  ]);\n}\n","import { combineReducers } from 'redux';\n\nimport { appReducer, AppState } from './appReducer';\n\nexport interface RootState {\n  app: AppState;\n}\n\nexport const rootReducer = (state: any, action: any) => {\n  return combineReducers({\n    app: appReducer,\n  })(state, action);\n};\n","import React, { ComponentClass } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Router } from 'react-router-dom';\n\nimport { App } from './App';\nimport { ConnectedIntlProvider, TextComponent } from './components/common/connected-intl-provider/ConnectedIntlProvider';\n\nimport { configureStore } from './store/configureStore';\nimport { AppHistory } from './config/appHistory';\n\nconst rootElement = document.getElementById('root');\nconst AppStore    = configureStore();\n\nconst render = (Component: ComponentClass) => {\n  ReactDOM.render((\n    <Provider store={ AppStore }>\n      <ConnectedIntlProvider textComponent={ TextComponent }>\n        <Router history={ AppHistory }>\n          <Component/>\n        </Router>\n      </ConnectedIntlProvider>\n    </Provider>\n  ), rootElement);\n};\n\nrender(App);\n","import { applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { environment } from '../config/environment';\n\nimport { rootSaga } from './sagas/rootSaga';\nimport { rootReducer } from './reducers/rootReducer';\n\n\nconst logger = createLogger({\n  predicate: () => environment.isLoggerEnabled,\n});\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const configureStore = (preloadedState = {}) => {\n  const store = createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunk, logger, sagaMiddleware)\n  );\n  \n  sagaMiddleware.run(rootSaga);\n  \n  return store;\n};\n","import { createBrowserHistory } from 'history';\n\nexport const AppHistory = createBrowserHistory();\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"telegram.worker.6143d0fff8d81f317cf0.js\");\n};"],"sourceRoot":""}