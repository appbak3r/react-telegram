{"version":3,"sources":["services/telegram.worker.ts","assets/icons/logo.svg","components/common/icons/LogoIcon.tsx","utils/makeIcon.tsx","components/common/logo/Logo.tsx","components/pages/app-loading/AppLoading.tsx","components/pages/AppRoute.tsx","store/telegram/types.ts","store/telegram/actions.ts","components/common/button/Button.tsx","components/forms/phone-number-input-select/PhoneNumberCountrySelect.tsx","components/forms/phone-number-input/PhoneNumberInput.tsx","components/auth/phone-form/PhoneForm.tsx","components/forms/input/Input.tsx","components/auth/code-form/CodeForm.tsx","components/auth/password-form/PasswordForm.tsx","components/auth/login-form/LoginForm.tsx","components/pages/login/Login.tsx","store/auth/types.ts","store/auth/actions.ts","components/auth/logout-button/LogoutButton.tsx","components/pages/messenger/Messenger.tsx","components/pages/PrivateRoute.tsx","store/app/actions.ts","store/app/types.ts","App.tsx","components/common/connected-intl-provider/ConnectedIntlProvider.ts","config/environmentDefault.ts","config/environmentProduction.ts","config/environment.ts","store/app/reducer.ts","store/auth/reducer.ts","store/telegram/reducer.ts","store/reducer.ts","services/GeoApiService.ts","store/app/saga.ts","store/auth/saga.ts","store/telegram/saga.ts","store/saga.ts","store/configureStore.ts","index.tsx","utils/enableTabMode.ts"],"names":["module","exports","Worker","__webpack_require__","p","symbol","browser_symbol_default","a","id","use","viewBox","content","logo","browser_sprite_build_default","add","LogoIcon","_ref","className","iconId","react_default","createElement","focusable","xlinkHref","concat","makeIcon","TelegramLogo","Logo","title","bem","block","LogoIcon_LogoIcon","index_es","defaultMessage","AppLoading","_PureComponent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","Logo_Logo","PureComponent","AppRoute","connect","state","telegram","app","props","component","restProps","objectWithoutProperties","Component","Route","assign","render","isReady","fetching","AppLoading_AppLoading","AUTHORIZATION_STATES","PHONE_NUMBER","CODE","PASSWORD","AUTHORIZED","LOGGING_OUT","LOADING","CLOSED","TELEGRAM_MESSAGE_TYPES","UPDATE_CONNECTION_STATE","UPDATE_AUTHORIZATION_STATE","READY","TELEGRAM_CONNECTION_STATE","SendMessageAction","createAction","action","data","SendMessageFailureAction","SendMessageSuccessAction","ReceiveMessageAction","Button","_classNames","_this$props","rootClassNames","classNames","defineProperty","children","NO_COUNTRY","PhoneNumberCountrySelect","_React$PureComponent","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","onChange","option","undefined","options","onBlur","onFocus","fixedOptions","map","objectSpread","selectedOption","find","Fragment","React","icon","react_select_esm","defaultProps","PhoneNumberInput","country","countryCode","_dec","_class","ref","createRef","current","input","focus","_this2","name","react_final_form_es","react_phone_number_input","inputClassName","toString","international","countrySelectComponent","PhoneForm","onSubmit","values","@type","phone_number","phone","handleSubmit","PhoneNumberInput_PhoneNumberInput","Button_Button","Input","errorMessage","validate","meta","hasError","touched","error","CodeForm","sendViaSms","Input_Input","type","onClick","PasswordForm","LoginForm","renderForm","PhoneForm_PhoneForm","CodeForm_CodeForm","PasswordForm_PasswordForm","Login","auth","dispatch","bindActionCreators","sendMessage","Login_dec","Login_class","_Component","authState","isAuthorized","Redirect","to","Helmet","LoginForm_LoginForm","LogoutAction","LogoutSuccessAction","LogoutFailureAction","LoginSuccessAction","LogoutButton","logout","LogoutButton_dec","LogoutButton_class","Messenger","LogoutButton_LogoutButton","PrivateRoute","es_Redirect","GetCountryCodeAction","GetCountryCodeSuccessAction","GetCountryCodeFailureAction","App","getCountryCode","pure","App_dec","App_class","Switch","path","exact","addLocaleData","toConsumableArray","en","messages","require","TextComponent","ConnectedIntlProvider","locale","IntlProvider","apiHash","process","environmentDefault","apiId","isLoggerEnabled","useTestDC","REACT_APP_TELEGRAM_PRODUCTION_DC","environmentProduction","environment","initialState","isFetching","isConnecting","rootReducer","combineReducers","getType","actions","payload","toUpperCase","telegramActions","message","authorization_state","GeoApiService","fetch","then","response","json","ip","country_code","appSaga","regenerator_default","wrap","_context","prev","next","sent","put","t0","stop","_marked","_context2","all","takeEvery","_marked2","updateAuthorization","authSaga","abrupt","console","log","saga_marked","saga_marked2","_context3","_marked3","worker","subscribeToTelegramWorker","dispatchMessage","telegramSaga","TelegramWorker","channel","eventChannel","emit","onmessage","event","terminate","telegram_saga_marked","telegram_saga_marked2","Error","asyncSendMessage","saga_marked3","Promise","resolve","reject","addEventListener","onMessageReceived","removeEventListener","postMessage","loadInitialData","_context4","_marked4","rootSaga","store_saga_marked","logger","createLogger","predicate","sagaMiddleware","createSagaMiddleware","rootElement","document","getElementById","AppStore","preloadedState","store","createStore","applyMiddleware","run","configureStore","ReactDOM","es","textComponent","HashRouter","TAB_MODE_CLASSNAME","onMouseMove","body","classList","remove","enableTabMode"],"mappings":"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","file":"static/js/main.fce7dc36.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"telegram.worker.9f69249aacaa1eea7352.js\");\n};","import SpriteSymbol from \"svg-baker-runtime/browser-symbol\";\nimport sprite from \"svg-sprite-loader/runtime/browser-sprite.build\";\nvar symbol = new SpriteSymbol({\n  \"id\": \"logo\",\n  \"use\": \"logo-usage\",\n  \"viewBox\": \"0 0 240 240\",\n  \"content\": \"<symbol xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 240 240\\\" id=\\\"logo\\\"><defs><linearGradient id=\\\"logo_a\\\" x1=\\\".667\\\" y1=\\\".167\\\" x2=\\\".417\\\" y2=\\\".75\\\"><stop stop-color=\\\"#37aee2\\\" offset=\\\"0\\\" /><stop stop-color=\\\"#1e96c8\\\" offset=\\\"1\\\" /></linearGradient><linearGradient id=\\\"logo_b\\\" x1=\\\".66\\\" y1=\\\".437\\\" x2=\\\".851\\\" y2=\\\".802\\\"><stop stop-color=\\\"#eff7fc\\\" offset=\\\"0\\\" /><stop stop-color=\\\"#fff\\\" offset=\\\"1\\\" /></linearGradient></defs><circle cx=\\\"120\\\" cy=\\\"120\\\" r=\\\"120\\\" fill=\\\"url(#logo_a)\\\" /><path fill=\\\"#c8daea\\\" d=\\\"m98 175c-3.8876 0-3.227-1.4679-4.5678-5.1695L82 132.2059 170 80\\\" /><path fill=\\\"#a9c9dd\\\" d=\\\"m98 175c3 0 4.3255-1.372 6-3l16-15.558-19.958-12.035\\\" /><path fill=\\\"url(#logo_b)\\\" d=\\\"m100.04 144.41 48.36 35.729c5.5185 3.0449 9.5014 1.4684 10.876-5.1235l19.685-92.763c2.0154-8.0802-3.0801-11.745-8.3594-9.3482l-115.59 44.571c-7.8901 3.1647-7.8441 7.5666-1.4382 9.528l29.663 9.2583 68.673-43.325c3.2419-1.9659 6.2173-0.90899 3.7752 1.2584\\\" /></symbol>\"\n});\nvar result = sprite.add(symbol);\nexport default symbol","import { makeIcon } from '../../../utils/makeIcon';\n\nimport TelegramLogo from '../../../assets/icons/logo.svg';\n\nexport const LogoIcon = ({ className }: { className?: string }) => makeIcon(TelegramLogo.id, className);","import React from 'react';\n\nexport const makeIcon = (iconId: string, className?: string) => {\n  return (\n    <svg className={ className }\n         focusable='false'>\n      <use xlinkHref={ `#${iconId}` }/>\n    </svg>\n  );\n};\n","import block from 'bem-cn';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { LogoIcon } from '../icons/LogoIcon';\nimport './logo.scss';\n\ntype LogoProps = {\n  title?: string | React.ReactNode;\n};\n\nexport const Logo: React.FunctionComponent<LogoProps> = ({ title }) => {\n  const bem = block('rt-logo');\n  \n  return (\n    <div className={ bem() }>\n      <LogoIcon className={ bem('icon') }/>\n      \n      <div className={ bem('title') }>\n        <FormattedMessage id={ 'components.logo.title' }\n                          defaultMessage={ 'Telegram' }/>\n      </div>\n      \n      { title && (\n        <div className={ bem('subtitle') }>\n          { title }\n        </div>\n      ) }\n    </div>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Logo } from '../../common/logo/Logo';\nimport './styles.scss';\n\nexport class AppLoading extends PureComponent {\n  render () {\n    return (\n      <div className='rt-app-loading'>\n        <div className='rt-app-loading__body'>\n          <Logo title={ <FormattedMessage id={ 'components.app-loading.title' }\n                                          defaultMessage={ 'a new era of messaging' }/> }/>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, RouteProps } from 'react-router-dom';\n\nimport { AppLoading } from './app-loading/AppLoading';\nimport { RootState } from '../../store/reducer';\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    telegram: state.telegram,\n    app: state.app,\n  };\n};\n\nexport const AppRoute: React.ComponentType<RouteProps> = connect(mapStateToProps)((props: RouteProps & RootState) => {\n  const { component, telegram, app, ...restProps } = props;\n  \n  const Component: React.ComponentType<any> = component as any;\n  \n  return <Route { ...restProps }\n                render={ (props => {\n                  if (!telegram.isReady || app.fetching) {\n                    return (<AppLoading/>);\n                  }\n    \n                  return <Component { ...props }/>;\n                }) }/>;\n}) as any;\n","export const SEND_MESSAGE_FETCHING = '@@rt/telegram/send-message/fetching';\nexport const SEND_MESSAGE_SUCCESS  = '@@rt/telegram/send-message/success';\nexport const SEND_MESSAGE_FAILURE  = '@@rt/telegram/send-message/failure';\n\nexport const RECEIVE_MESSAGE = '@rt/telegram/receive-message';\n\nexport const AUTHORIZATION_STATES = {\n  PHONE_NUMBER: 'authorizationStateWaitPhoneNumber',\n  CODE: 'authorizationStateWaitCode',\n  PASSWORD: 'authorizationStateWaitPassword',\n  AUTHORIZED: 'authorizationStateReady',\n  LOGGING_OUT: 'authorizationStateLoggingOut',\n  LOADING: 'authorizationStateWaitEncryptionKey',\n  CLOSED: 'authorizationStateClosed'\n};\n\nexport type TelegramMessage = {\n  [key: string]: any;\n};\n\nexport type TelegramMessagePayload = {\n  data: TelegramMessage,\n};\n\n\nexport const TELEGRAM_MESSAGE_TYPES = {\n  UPDATE_CONNECTION_STATE: 'updateConnectionState',\n  UPDATE_AUTHORIZATION_STATE: 'updateAuthorizationState',\n  READY: 'ok',\n};\n\nexport const TELEGRAM_CONNECTION_STATE = {\n  CONNECTING: 'connectionStateConnecting',\n  READY: 'connectionStateReady',\n};\n","import { createAction } from 'typesafe-actions';\nimport {\n  RECEIVE_MESSAGE,\n  SEND_MESSAGE_FAILURE,\n  SEND_MESSAGE_FETCHING,\n  SEND_MESSAGE_SUCCESS, TelegramMessage,\n  TelegramMessagePayload\n} from './types';\n\nexport const SendMessageAction        = createAction(SEND_MESSAGE_FETCHING, (action) => (data: TelegramMessage) => action(data));\nexport const SendMessageFailureAction = createAction(SEND_MESSAGE_FAILURE);\nexport const SendMessageSuccessAction = createAction(SEND_MESSAGE_SUCCESS);\n\nexport const ReceiveMessageAction = createAction(RECEIVE_MESSAGE, (action) => (data: TelegramMessagePayload) => action(data));\n","import block from 'bem-cn';\nimport React, { ButtonHTMLAttributes, PureComponent } from 'react';\nimport classNames from 'classnames';\n\nimport './styles.scss';\n\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport class Button extends PureComponent<ButtonProps> {\n  render () {\n    const { className, ...restProps } = this.props;\n    \n    const bem = block('rt-button');\n    \n    const rootClassNames = classNames({\n      [bem()]: true,\n      [className as string]: className,\n    });\n    \n    return (\n      <button { ...restProps }\n              className={ rootClassNames }>\n        { this.props.children }\n      </button>\n    );\n  }\n}\n","import block from 'bem-cn';\nimport React, { SelectHTMLAttributes } from 'react';\nimport Select from 'react-select';\n\ntype Option = {\n  value: string;\n  label: string;\n  icon: React.FunctionComponent<{ value: string }>;\n};\n\ntype PhoneNumberCountrySelectProps = {\n  name: string;\n  onChange: (value: string | undefined) => void;\n  options: Option[],\n} & SelectHTMLAttributes<HTMLSelectElement>;\n\nconst NO_COUNTRY = 'ZZ';\n\nexport class PhoneNumberCountrySelect extends React.PureComponent<PhoneNumberCountrySelectProps> {\n  static defaultProps: Partial<PhoneNumberCountrySelectProps> = {\n    value: NO_COUNTRY,\n  };\n  \n  onChange = (option: Option) => {\n    const { onChange } = this.props;\n    \n    onChange(option.value === NO_COUNTRY ? undefined : option.value);\n  };\n  \n  render () {\n    const bem = block('rt-phone-number-country-select');\n    \n    const { value, options, onBlur, onFocus } = this.props;\n    \n    const fixedOptions = options.map((option: Option) => {\n      return {\n        ...option,\n        value: option.value || NO_COUNTRY,\n      };\n    });\n    \n    const selectedOption = fixedOptions.find((option: Option) => option.value === value);\n    \n    return (\n      <React.Fragment>\n        { selectedOption && React.createElement(selectedOption.icon, { value: selectedOption.value }) }\n        \n        <div className={ bem() }>\n          <Select value={ selectedOption }\n                  className={ bem('select') }\n                  options={ fixedOptions }\n                  onBlur={ onBlur as any }\n                  onFocus={ onFocus as any }\n                  onChange={ this.onChange as any }/>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import block from 'bem-cn';\nimport React, { InputHTMLAttributes } from 'react';\nimport { Field } from 'react-final-form';\nimport PhoneInput from 'react-phone-number-input';\nimport { connect } from 'react-redux';\nimport { RootState } from '../../../store/reducer';\nimport { PhoneNumberCountrySelect } from '../phone-number-input-select/PhoneNumberCountrySelect';\nimport './styles.scss';\n\ntype PhoneNumberInputProps = {\n  name: string;\n  validate?: (value: string) => any;\n  errorMessage?: string;\n  country?: string;\n} & InputHTMLAttributes<HTMLInputElement>;\n\nconst mapStateToProps = (state: RootState) => {\n  return { country: state.app.countryCode };\n};\n\n@(connect as any)(mapStateToProps)\nexport class PhoneNumberInput extends React.PureComponent<PhoneNumberInputProps> {\n  private ref = React.createRef<any>();\n  \n  componentDidMount (): void {\n    this.ref.current && this.ref.current.input.focus();\n  }\n  \n  render () {\n    const { name, country } = this.props;\n    \n    const bem = block('rt-phone-number-input');\n    \n    return (\n      <Field name={ name }>\n        { ({ input }) => {\n          return (\n            <PhoneInput ref={ this.ref }\n                        value={ input.value }\n                        className={ bem() }\n                        inputClassName={ bem('input').toString() }\n                        international={ false }\n                        country={ country }\n                        onChange={ input.onChange }\n                        countrySelectComponent={ PhoneNumberCountrySelect as any }/>\n          );\n        } }\n      </Field>\n    );\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { Form } from 'react-final-form';\nimport { FormattedMessage } from 'react-intl';\nimport { Button } from '../../common/button/Button';\nimport { Logo } from '../../common/logo/Logo';\nimport { PhoneNumberInput } from '../../forms/phone-number-input/PhoneNumberInput';\nimport './styles.scss';\n\ntype PhoneFormProps = {\n  onSubmit: (message: any) => void;\n}\n\ntype PhoneFormState = {}\n\nexport class PhoneForm extends PureComponent<PhoneFormProps, PhoneFormState> {\n  onSubmit = (values: any) => {\n    this.props.onSubmit({\n      '@type': 'setAuthenticationPhoneNumber',\n      phone_number: values.phone,\n    });\n  };\n  \n  render () {\n    return (\n      <Form onSubmit={ this.onSubmit }>\n        { ({ handleSubmit }) => {\n          return (\n            <form onSubmit={ handleSubmit } className='rt-phone-form'>\n              <div className='rt-phone-form__header'>\n                <Logo title={ <FormattedMessage id={ 'components.phone-form.subtitle' }\n                                                defaultMessage={ 'Welcome to the web application' }/> }/>\n              </div>\n              \n              <div className='rt-phone-form__body'>\n                <PhoneNumberInput name={ 'phone' }/>\n  \n                <Button className='rt-phone-form__submit rt-button--primary'>\n                  <FormattedMessage id={ 'components.phone-form.submit' }\n                                    defaultMessage={ 'Next' }/>\n                </Button>\n              </div>\n            </form>\n          );\n        } }\n      </Form>\n    );\n  }\n}\n","import block from 'bem-cn';\nimport React, { InputHTMLAttributes, PureComponent } from 'react';\nimport { Field } from 'react-final-form';\nimport './styles.scss';\n\ntype InputProps = {\n  name: string;\n  validate?: (value: string) => any;\n  errorMessage?: string;\n} & InputHTMLAttributes<HTMLInputElement>;\n\nexport class Input extends PureComponent<InputProps> {\n  render (): React.ReactNode {\n    const { name, errorMessage, validate, ...restProps } = this.props;\n    \n    const bem = block('rt-input');\n    \n    return (\n      <Field name={ name }\n             validate={ validate }>\n        { ({ input, meta }) => {\n          const hasError = meta.touched && meta.error;\n          \n          return (\n            <div className={ bem() }>\n              <input { ...input }\n                     { ...restProps }\n                     className={ bem('input') }/>\n              \n              { hasError && (\n                <div className={ bem('error') }>\n                  { errorMessage || meta.error }\n                </div>\n              ) }\n            </div>\n          );\n        } }\n      </Field>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { Form } from 'react-final-form';\nimport { Button } from '../../common/button/Button';\nimport { FormattedMessage } from 'react-intl';\nimport { Input } from '../../forms/input/Input';\n\ninterface CodeFormProps {\n  onSubmit: (message: any) => void;\n}\n\nexport class CodeForm extends PureComponent<CodeFormProps> {\n  onSubmit = (values: any) => {\n    this.props.onSubmit({\n      '@type': 'checkAuthenticationCode',\n      ...values,\n    });\n  };\n  \n  sendViaSms = () => {\n    this.props.onSubmit({\n      '@type': 'resendAuthenticationCode',\n    });\n  };\n  \n  render () {\n    return (\n      <Form onSubmit={ this.onSubmit }>\n        { ({ handleSubmit }) => {\n          return (\n            <form onSubmit={ handleSubmit } className='rt-code-form'>\n              <h1>Enter code</h1>\n              \n              <Input name='code'/>\n              \n              <Button type='button' onClick={ this.sendViaSms }>\n                <FormattedMessage id='components.code-form.resend'\n                                  defaultMessage={ 'Resend' }/>\n              </Button>\n              \n              <Button className='rt-button--primary'>\n                <FormattedMessage id='components.code-form.submit'\n                                  defaultMessage={ 'Next' }/>\n              </Button>\n            </form>\n          );\n        } }\n      </Form>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { Form } from 'react-final-form';\n\ninterface PasswordFormProps {\n  onSubmit: (message: any) => void;\n}\n\nexport class PasswordForm extends PureComponent<PasswordFormProps> {\n  onSubmit = (values: any) => {\n    this.props.onSubmit({\n      '@type': 'checkAuthenticationPassword',\n      ...values,\n    });\n  };\n  \n  render () {\n    return (\n      <Form onSubmit={ this.onSubmit }>\n        { ({ handleSubmit }) => {\n          return (\n            <form onSubmit={ handleSubmit } className='rt-password-form'>\n              <h1>Enter password</h1>\n              \n              \n              <button>submit</button>\n            </form>\n          );\n        } }\n      </Form>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { PhoneForm } from '../phone-form/PhoneForm';\nimport { CodeForm } from '../code-form/CodeForm';\nimport { PasswordForm } from '../password-form/PasswordForm';\nimport { AUTHORIZATION_STATES } from '../../../store/telegram/types';\n\ntype LoginFormProps = {\n  state: any;\n  onSubmit: any;\n}\n\nexport class LoginForm extends PureComponent<LoginFormProps> {\n  render () {\n    return (\n      <div className='rt-login-form'>\n        { this.renderForm() }\n      </div>\n    );\n  }\n  \n  renderForm (): React.ReactNode {\n    const { state, onSubmit } = this.props;\n    \n    switch (state) {\n      case AUTHORIZATION_STATES.PHONE_NUMBER: {\n        return <PhoneForm onSubmit={ onSubmit }/>;\n      }\n      \n      case AUTHORIZATION_STATES.CODE: {\n        return <CodeForm onSubmit={ onSubmit }/>;\n      }\n      \n      case AUTHORIZATION_STATES.PASSWORD: {\n        return <PasswordForm onSubmit={ onSubmit }/>;\n      }\n      \n      default: {\n        return state;\n      }\n    }\n  }\n}\n","import block from 'bem-cn';\nimport React, { Component } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { AuthState } from '../../../store/auth/reducer';\nimport { RootState } from '../../../store/reducer';\nimport { SendMessageAction } from '../../../store/telegram/actions';\nimport { LoginForm } from '../../auth/login-form/LoginForm';\nimport './styles.scss';\n\ntype OwnProps = {};\ntype DispatchProps = { sendMessage: typeof SendMessageAction };\ntype LoginProps = OwnProps & Partial<AuthState & DispatchProps>;\n\n@(connect as any)(mapStateToProps, mapDispatchToProps)\nexport class Login extends Component<LoginProps> {\n  render () {\n    const bem = block('rt-login');\n    \n    const { authState, isAuthorized, sendMessage } = this.props;\n    \n    if (isAuthorized) {\n      return <Redirect to={ '/' }/>;\n    }\n    \n    return (\n      <div className={ bem() }>\n        <FormattedMessage id={ 'common.pages.login.title' }\n                          defaultMessage={ 'Telegram | Sign in' }>\n          {\n            title => (\n              <Helmet>\n                <title>{ title }</title>\n              </Helmet>\n            )\n          }\n        </FormattedMessage>\n        \n        <div className={ bem('body') }>\n          <LoginForm state={ authState }\n                     onSubmit={ sendMessage }/>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapDispatchToProps (dispatch: Dispatch) {\n  return bindActionCreators({ sendMessage: SendMessageAction }, dispatch);\n}\n\nfunction mapStateToProps (state: RootState): AuthState {\n  return state.auth;\n}\n","export const LOGOUT_FETCHING = '@@rt/auth/logout/fetching';\nexport const LOGOUT_SUCCESS = '@@rt/auth/logout/success';\nexport const LOGOUT_FAILURE = '@@rt/auth/logout/failure';\n\nexport const LOGIN_SUCCESS = '@rt/auth/login/success';\n","import { createAction } from 'typesafe-actions';\nimport { LOGIN_SUCCESS, LOGOUT_FAILURE, LOGOUT_FETCHING, LOGOUT_SUCCESS } from './types';\n\nexport const LogoutAction        = createAction(LOGOUT_FETCHING);\nexport const LogoutSuccessAction = createAction(LOGOUT_SUCCESS);\nexport const LogoutFailureAction = createAction(LOGOUT_FAILURE);\n\nexport const LoginSuccessAction = createAction(LOGIN_SUCCESS);\n","import React, { PureComponent } from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { Button } from '../../common/button/Button';\nimport { LogoutAction } from '../../../store/auth/actions';\n\ntype OwnProps = {};\n\ntype DispatchProps = {\n  logout: typeof LogoutAction\n};\n\ntype LogoutButtonProps = OwnProps & Partial<DispatchProps>;\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return bindActionCreators({\n    logout: LogoutAction\n  }, dispatch);\n};\n\n@(connect as any)(null, mapDispatchToProps)\nexport class LogoutButton extends PureComponent<LogoutButtonProps> {\n  render () {\n    return (\n      <Button className='ri-logout-button'\n              onClick={ this.props.logout }>\n        Logout\n      </Button>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { FormattedMessage } from 'react-intl';\n\nimport { LogoutButton } from '../../auth/logout-button/LogoutButton';\n\nexport class Messenger extends PureComponent {\n  render () {\n    return (\n      <div>\n        <FormattedMessage id={ 'common.pages.messenger.title' }\n                          defaultMessage={ 'Telegram' }>\n          {\n            title => (\n              <Helmet>\n                <title>{ title }</title>\n              </Helmet>\n            )\n          }\n        </FormattedMessage>\n        \n        <LogoutButton/>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect, Route, RouteProps } from 'react-router-dom';\n\nimport { AppLoading } from './app-loading/AppLoading';\nimport { RootState } from '../../store/reducer';\n\nconst mapStateToProps = (state: RootState) => {\n  return state;\n};\n\nexport const PrivateRoute: React.ComponentType<RouteProps> = connect(mapStateToProps)((props: RouteProps & RootState) => {\n  const { component, telegram, auth, app, ...restProps } = props;\n  \n  const Component: React.ComponentType<any> = component as any;\n  \n  return <Route { ...restProps }\n                render={ (props => {\n                  if (!telegram.isReady || app.fetching) {\n                    return (<AppLoading/>);\n                  }\n    \n                  if (!auth.isAuthorized) {\n                    return <Redirect to={ '/login' }/>;\n                  }\n    \n                  return <Component { ...props }/>;\n                }) }/>;\n}) as any;\n","import { createAction } from 'typesafe-actions';\nimport { GET_COUNTRY_CODE, GET_COUNTRY_CODE_FAILURE, GET_COUNTRY_CODE_SUCCESS } from './types';\n\nexport const GetCountryCodeAction        = createAction(GET_COUNTRY_CODE);\nexport const GetCountryCodeSuccessAction = createAction(GET_COUNTRY_CODE_SUCCESS, (action) => (countryCode: string) => action({ countryCode }));\nexport const GetCountryCodeFailureAction = createAction(GET_COUNTRY_CODE_FAILURE);\n","export const GET_COUNTRY_CODE         = '@rt/app/get-country-code/fetching';\nexport const GET_COUNTRY_CODE_SUCCESS = '@rt/app/get-country-code/success';\nexport const GET_COUNTRY_CODE_FAILURE = '@rt/app/get-country-code/failure';\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Switch } from 'react-router';\nimport './assets/styles/main.scss';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { AppRoute } from './components/pages/AppRoute';\nimport { Login } from './components/pages/login/Login';\nimport { Messenger } from './components/pages/messenger/Messenger';\nimport { PrivateRoute } from './components/pages/PrivateRoute';\nimport { GetCountryCodeAction } from './store/app/actions';\nimport { AuthState } from './store/auth/reducer';\nimport { RootState } from './store/reducer';\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return bindActionCreators({\n    getCountryCode: GetCountryCodeAction\n  }, dispatch);\n};\n\nconst mapStateToProps = (state: RootState) => {\n  return state.auth;\n};\n\ntype OwnProps = {};\n\ntype DispatchProps = {\n  getCountryCode: typeof GetCountryCodeAction,\n};\n\ntype AppProps = OwnProps & Partial<DispatchProps> & Partial<AuthState>;\n\n@(connect as any)(mapStateToProps, mapDispatchToProps, null, { pure: false })\nexport class App extends Component<AppProps> {\n  constructor (props: AppProps) {\n    super(props);\n    \n    props.getCountryCode && props.getCountryCode();\n  }\n  \n  render (): React.ReactNode {\n    return (\n      <div className='rt-app'>\n        <Switch>\n          <AppRoute path={ '/login' } exact={ true } component={ Login }/>\n          \n          <PrivateRoute path='/' component={ Messenger }/>\n        </Switch>\n      </div>\n    );\n  }\n}\n","import { IntlProvider, addLocaleData } from 'react-intl';\nimport { connect } from 'react-redux';\nimport * as en from 'react-intl/locale-data/en';\n\naddLocaleData([...en]);\n\nexport const messages = {\n  en: require('../../../locales/en.json'),\n};\n\nexport const TextComponent = (props: any) => {\n  return props.children;\n};\n\nfunction mapStateToProps (): any {\n  const locale = 'en';\n\n  return {\n    locale,\n    messages: { ...messages.en, ...messages[locale] },\n  };\n}\n\nexport const ConnectedIntlProvider = connect(mapStateToProps)(IntlProvider);\n","import { IEnvironment } from './environment';\n\nconst apiId   = process.env.REACT_APP_TELEGRAM_API_ID;\nconst apiHash = process.env.REACT_APP_TELEGRAM_API_HASH;\n\nif (!apiId || !apiHash) {\n  throw new Error('api_id and api_hash are not defined');\n}\n\nexport const environmentDefault: IEnvironment = {\n  apiId,\n  apiHash,\n  isLoggerEnabled: true,\n  useTestDC: !process.env.REACT_APP_TELEGRAM_PRODUCTION_DC,\n};\n","import { IEnvironment } from './environment';\nimport { environmentDefault } from './environmentDefault';\n\nexport const environmentProduction: IEnvironment = {\n  ...environmentDefault,\n  isLoggerEnabled: false,\n};","import { environmentDefault } from './environmentDefault';\nimport { environmentProduction } from './environmentProduction';\n\nexport interface IEnvironment {\n  apiId: string;\n  apiHash: string;\n  isLoggerEnabled: boolean;\n  useTestDC: boolean;\n}\n\nexport let environment: IEnvironment = {\n  ...environmentDefault,\n};\n\nif (process.env.NODE_ENV === 'production') {\n  environment = {\n    ...environmentProduction,\n  };\n}\n","import { ActionType, getType } from 'typesafe-actions';\nimport * as actions from './actions';\n\nexport type AppAction = ActionType<typeof actions>\n\ntype AppState = {\n  fetching: boolean;\n  countryCode: Nullable<string>;\n};\n\nconst initialState: AppState = {\n  fetching: false,\n  countryCode: 'US',\n};\n\nexport const appReducer = (state = initialState, action: AppAction): AppState => {\n  switch (action.type) {\n    case getType(actions.GetCountryCodeAction): {\n      return {\n        ...state,\n        fetching: true,\n      };\n    }\n    \n    case getType(actions.GetCountryCodeSuccessAction): {\n      const countryCode = action.payload.countryCode.toUpperCase();\n      \n      return {\n        ...state,\n        fetching: false,\n        countryCode: countryCode || initialState.countryCode,\n      };\n    }\n    \n    case getType(actions.GetCountryCodeFailureAction): {\n      return {\n        ...state,\n        fetching: false,\n      };\n    }\n    \n    default: {\n      return state;\n    }\n  }\n};\n","import { ActionType, getType } from 'typesafe-actions';\nimport * as telegramActions from '../telegram/actions';\nimport { TelegramAction } from '../telegram/reducer';\nimport { TELEGRAM_MESSAGE_TYPES } from '../telegram/types';\nimport * as actions from './actions';\n\nexport type AuthState = {\n  readonly isAuthorized: boolean;\n  readonly isFetching: boolean;\n  readonly error: Nullable<any>;\n  readonly authState: Nullable<string>;\n};\n\nexport type AuthAction = ActionType<typeof actions>\n\nconst initialState: AuthState = {\n  isAuthorized: false,\n  isFetching: false,\n  error: null,\n  authState: null,\n};\n\nexport const authReducer = (state = initialState, action: AuthAction | TelegramAction): AuthState => {\n  switch (action.type) {\n    case getType(actions.LogoutAction): {\n      return {\n        ...state,\n        isFetching: true,\n      };\n    }\n    \n    case getType(actions.LogoutSuccessAction): {\n      return {\n        ...state,\n        isFetching: false,\n        isAuthorized: false,\n      };\n    }\n    \n    case getType(actions.LogoutFailureAction): {\n      return {\n        ...state,\n        isFetching: false,\n      };\n    }\n    \n    case getType(actions.LoginSuccessAction): {\n      return {\n        ...state,\n        isAuthorized: true,\n      };\n    }\n    \n    case getType(telegramActions.ReceiveMessageAction): {\n      const message = action.payload.data;\n      \n      if (message['@type'] === TELEGRAM_MESSAGE_TYPES.UPDATE_AUTHORIZATION_STATE) {\n        return {\n          ...state,\n          authState: message.authorization_state['@type']\n        };\n      }\n      \n      return state;\n    }\n    \n    default: {\n      return state;\n    }\n  }\n};\n","import { ActionType, getType } from 'typesafe-actions';\n\nimport * as actions from './actions';\nimport { TELEGRAM_CONNECTION_STATE, TELEGRAM_MESSAGE_TYPES } from './types';\n\nexport type TelegramState = {\n  readonly isConnecting: boolean;\n  readonly isReady: boolean;\n};\n\nexport type TelegramAction = ActionType<typeof actions>\n\nconst initialState: TelegramState = {\n  isConnecting: true,\n  isReady: false,\n};\n\nexport const telegramReducer = (state = initialState, action: TelegramAction): TelegramState => {\n  switch (action.type) {\n    case getType(actions.ReceiveMessageAction): {\n      const message = action.payload.data;\n      \n      switch (message['@type']) {\n        case TELEGRAM_MESSAGE_TYPES.UPDATE_CONNECTION_STATE: {\n          switch (message.state['@type']) {\n            case TELEGRAM_CONNECTION_STATE.CONNECTING: {\n              return {\n                ...state,\n                isConnecting: true,\n              };\n            }\n            \n            case TELEGRAM_CONNECTION_STATE.READY: {\n              return {\n                ...state,\n                isConnecting: false,\n              };\n            }\n            \n            default: {\n              return state;\n            }\n          }\n        }\n        \n        case TELEGRAM_MESSAGE_TYPES.READY: {\n          if (message['@extra'] && message['@extra']['@type'] === 'setTdlibParameters') {\n            return {\n              ...state,\n              isReady: true,\n            };\n          }\n          \n          return state;\n        }\n        \n        default: {\n          return state;\n        }\n      }\n    }\n    \n    default: {\n      return state;\n    }\n  }\n};\n","import { combineReducers } from 'redux';\nimport { StateType } from 'typesafe-actions';\nimport { appReducer } from './app/reducer';\nimport { authReducer } from './auth/reducer';\nimport { telegramReducer } from './telegram/reducer';\n\nexport const rootReducer = combineReducers({\n  app: appReducer,\n  auth: authReducer,\n  telegram: telegramReducer,\n});\n\nexport type RootState = StateType<typeof rootReducer>;\n","export class GeoApiService {\n  static getCountryCode () {\n    return fetch('https://ip.nf/me.json')\n      .then(response => {\n        return response.json();\n      })\n      .then((data) => {\n        return data.ip.country_code;\n      });\n  }\n}\n","import { all, put, takeEvery } from 'redux-saga/effects';\nimport { getType } from 'typesafe-actions';\nimport { GeoApiService } from '../../services/GeoApiService';\nimport * as actions from './actions';\n\nfunction* getCountryCode () {\n  try {\n    const countryCode = yield GeoApiService.getCountryCode();\n    \n    yield put(actions.GetCountryCodeSuccessAction(countryCode));\n  } catch {\n    yield  put(actions.GetCountryCodeFailureAction());\n  }\n}\n\nexport function* appSaga () {\n  yield all([\n    takeEvery(getType(actions.GetCountryCodeAction), getCountryCode)\n  ]);\n}\n","import { all, put, takeEvery } from 'redux-saga/effects';\nimport { ActionType, getType } from 'typesafe-actions';\nimport { ReceiveMessageAction, SendMessageAction } from '../telegram/actions';\nimport { AUTHORIZATION_STATES, TELEGRAM_MESSAGE_TYPES } from '../telegram/types';\nimport { LoginSuccessAction, LogoutAction, LogoutSuccessAction } from './actions';\n\nfunction* updateAuthorization (action: ActionType<typeof ReceiveMessageAction>) {\n  switch (action.payload.data['@type']) {\n    case TELEGRAM_MESSAGE_TYPES.UPDATE_AUTHORIZATION_STATE: {\n      const message = action.payload.data;\n      \n      \n      if (message.authorization_state['@type'] === AUTHORIZATION_STATES.AUTHORIZED) {\n        yield put(LoginSuccessAction());\n      }\n      \n      break;\n    }\n    \n    default: {\n      console.log('skip...');\n    }\n  }\n}\n\nfunction* logout () {\n  yield put(SendMessageAction({ '@type': 'logOut' }));\n  yield put(LogoutSuccessAction());\n}\n\nexport function* authSaga () {\n  return yield all([\n    takeEvery(getType(ReceiveMessageAction), updateAuthorization),\n    takeEvery(getType(LogoutAction), logout)\n  ]);\n}\n","import { all, takeEvery, call, put } from 'redux-saga/effects';\nimport { eventChannel } from 'redux-saga';\nimport { getType } from 'typesafe-actions';\n\nimport { AUTHORIZATION_STATES } from './types';\nimport { ReceiveMessageAction, SendMessageAction, SendMessageFailureAction, SendMessageSuccessAction } from './actions';\n\nconst TelegramWorker = require('../../services/telegram.worker');\n\nlet worker: any;\n\nfunction createWorker () {\n  worker = new TelegramWorker();\n  \n  return eventChannel((emit: any) => {\n    worker.onmessage = (event: any) => {\n      emit(ReceiveMessageAction({\n        data: event.data,\n      }));\n    };\n    \n    return worker.terminate;\n  });\n}\n\nfunction* subscribeToTelegramWorker () {\n  const channel = yield createWorker();\n  \n  yield takeEvery(channel, dispatchMessage);\n}\n\nfunction* dispatchMessage (action: any) {\n  return yield put(action);\n}\n\nfunction* sendMessage (action: any) {\n  if (!worker) {\n    throw new Error('Worker is not yet ready');\n  }\n  \n  try {\n    yield asyncSendMessage(action.payload);\n    \n    put(SendMessageSuccessAction());\n  } catch {\n    put(SendMessageFailureAction());\n  }\n}\n\nexport const asyncSendMessage = (message: any): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    const onMessageReceived = (event: any) => {\n      worker.removeEventListener('message', onMessageReceived);\n      \n      if (event.data['@type'] === 'error') {\n        return reject(event.data);\n      }\n      \n      return resolve(event.data);\n    };\n    \n    worker.addEventListener('message', onMessageReceived);\n    \n    worker.postMessage({\n      type: 'send',\n      payload: message,\n    });\n  });\n};\n\nfunction loadInitialData (action: any) {\n  switch (action.payload.data['@type']) {\n    case 'updateAuthorizationState': {\n      if (action.payload.data.authorization_state['@type'] === AUTHORIZATION_STATES.AUTHORIZED) {\n        worker.postMessage({\n          type: 'send',\n          payload: {\n            '@type': 'setOption',\n            name: 'online',\n            value: {\n              '@type': 'optionValueBoolean',\n              value: true,\n            },\n          }\n        });\n      }\n    }\n  }\n}\n\nexport function* telegramSaga () {\n  return yield all([\n    call(subscribeToTelegramWorker),\n    takeEvery(getType(ReceiveMessageAction), loadInitialData),\n    takeEvery(getType(SendMessageAction), sendMessage)\n  ]);\n}\n","import { all, call } from 'redux-saga/effects';\nimport { appSaga } from './app/saga';\nimport { authSaga } from './auth/saga';\nimport { telegramSaga } from './telegram/saga';\n\nexport function* rootSaga () {\n  return yield all([\n    call(appSaga),\n    call(telegramSaga),\n    call(authSaga)\n  ]);\n}\n","import { applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { environment } from '../config/environment';\nimport { rootReducer } from './reducer';\nimport { rootSaga } from './saga';\n\nconst logger = createLogger({\n  predicate: () => environment.isLoggerEnabled,\n});\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const configureStore = (preloadedState = {}) => {\n  const store = createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(logger, sagaMiddleware)\n  );\n  \n  sagaMiddleware.run(rootSaga);\n  \n  return store;\n};\n","import React, { ComponentClass } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './App';\nimport { ConnectedIntlProvider, TextComponent } from './components/common/connected-intl-provider/ConnectedIntlProvider';\n\nimport { configureStore } from './store/configureStore';\n\nimport { enableTabMode } from './utils/enableTabMode';\n\nconst rootElement = document.getElementById('root');\nconst AppStore    = configureStore();\n\nconst render = (Component: ComponentClass) => {\n  ReactDOM.render((\n    <Provider store={ AppStore }>\n      <ConnectedIntlProvider textComponent={ TextComponent }>\n        <HashRouter>\n          <Component/>\n        </HashRouter>\n      </ConnectedIntlProvider>\n    </Provider>\n  ), rootElement);\n};\n\nrender(App);\n\nif ((module as any).hot) {\n  (module as any).hot.accept();\n  \n  const NextApp = require('./App').App;\n  \n  render(NextApp);\n}\n\nenableTabMode();\n","export const enableTabMode = () => {\n  const TAB_MODE_CLASSNAME = 'rt-tab-mode';\n\n  document.addEventListener('keydown', (event: KeyboardEvent) => {\n    if (event.key === 'Tab') {\n      document.body.classList.add(TAB_MODE_CLASSNAME);\n    }\n\n    document.addEventListener('mousemove', onMouseMove);\n  });\n\n  function onMouseMove (): void {\n    document.body.classList.remove(TAB_MODE_CLASSNAME);\n\n    document.removeEventListener('mousemove', onMouseMove);\n  }\n};\n"],"sourceRoot":""}