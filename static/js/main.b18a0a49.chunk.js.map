{"version":3,"sources":["services/telegram.worker.ts","utils/makeIcon.tsx","assets/icons/logo.svg","components/common/icons/LogoIcon.tsx","components/common/logo/Logo.tsx","components/pages/app-loading/AppLoading.tsx","components/pages/AppRoute.tsx","store/telegram/types.ts","store/auth/actions.ts","store/auth/types.ts","assets/icons/spinner.svg","components/common/icons/SpinnerIcon.tsx","components/common/button/Button.tsx","components/forms/input/Input.tsx","components/auth/logout-button/LogoutButton.tsx","components/auth/code-form/CodeForm.tsx","components/auth/password-form/PasswordForm.tsx","components/forms/phone-number-input-select/PhoneNumberCountrySelect.tsx","components/forms/phone-number-input/PhoneNumberInput.tsx","components/auth/phone-form/PhoneForm.tsx","components/auth/login-form/LoginForm.tsx","components/pages/login/Login.tsx","store/chats/actions.ts","store/chats/types.ts","store/chats/selectors.ts","components/messenger/chat/last-message/LastMessage.tsx","components/messenger/chat/dialog-preview/DialogPreview.tsx","components/messenger/chat/Chat.tsx","components/messenger/menu/Menu.tsx","components/messenger/settings/Settings.tsx","components/pages/messenger/Messenger.tsx","components/pages/PrivateRoute.tsx","store/app/actions.ts","store/app/types.ts","App.tsx","components/common/connected-intl-provider/ConnectedIntlProvider.ts","serviceWorker.ts","config/environmentDefault.ts","config/environmentProduction.ts","config/environment.ts","store/app/reducer.ts","store/telegram/actions.ts","store/auth/reducer.ts","store/chats/reducer.ts","store/telegram/reducer.ts","store/reducer.ts","services/GeoApiService.ts","store/app/saga.ts","store/telegram/saga.ts","store/auth/saga.ts","constants/number.ts","store/chats/saga.ts","store/saga.ts","store/configureStore.ts","index.tsx","utils/enableTabMode.ts"],"names":["module","exports","Worker","__webpack_require__","p","makeIcon","iconId","className","react_default","a","createElement","focusable","xlinkHref","concat","symbol","browser_symbol_default","id","use","viewBox","content","logo","browser_sprite_build_default","add","LogoIcon","_ref","TelegramLogo","Logo","title","bem","block","LogoIcon_LogoIcon","index_es","defaultMessage","AppLoading","_PureComponent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","Logo_Logo","PureComponent","AppRoute","connect","state","telegram","app","props","component","restProps","objectWithoutProperties","Component","Route","assign","render","isReady","fetching","AppLoading_AppLoading","AUTHORIZATION_STATES","PHONE_NUMBER","CODE","PASSWORD","AUTHORIZED","LOGGING_OUT","LOADING","WAIT_TDLIB","CLOSED","TELEGRAM_MESSAGE_TYPES","UPDATE_CONNECTION_STATE","UPDATE_AUTHORIZATION_STATE","UPDATE_OPTION","UPDATE_CHAT_READ_INBOX","READY","TELEGRAM_CONNECTION_STATE","LogoutAction","createAction","LogoutSuccessAction","LogoutFailureAction","LoginSuccessAction","SetPhoneNumberAction","action","phone","SetPhoneNumberSuccessAction","SetPhoneNumberFailureAction","SetCodeAction","code","SetCodeSuccessAction","SetCodeFailureAction","ResendCodeAction","ResendCodeSuccessAction","ResendCodeFailureAction","CheckPasswordAction","password","CheckPasswordSuccessAction","CheckPasswordFailureAction","spinner_symbol","spinner","SpinnerIcon","spinnerIcon","Button","_classNames","_this$props","loading","rootClassNames","classNames","defineProperty","is","Boolean","children","SpinnerIcon_SpinnerIcon","Input","name","errorMessage","validate","react_final_form_es","input","meta","hasError","touched","error","LogoutButton","auth","dispatch","bindActionCreators","logout","isLoggingOut","Button_Button","onClick","CodeForm","setCode","resendCode","onSubmit","_this","_this2","_ref2","handleSubmit","Input_Input","type","autoFocus","isFetching","PasswordForm","checkPassword","NO_COUNTRY","PhoneNumberCountrySelect","_getPrototypeOf2","_len","length","args","Array","_key","call","onChange","option","undefined","options","onBlur","onFocus","fixedOptions","map","objectSpread","selectedOption","find","Fragment","React","icon","react_select_esm","defaultProps","PhoneNumberInput","country","countryCode","PhoneNumberInput_dec","PhoneNumberInput_class","ref","createRef","current","focus","react_phone_number_input","inputClassName","toString","international","countrySelectComponent","PhoneForm","setPhoneNumber","PhoneNumberInput_PhoneNumberInput","LoginForm","renderForm","Login","authState","isAuthorized","Redirect","to","Helmet","LoginForm_LoginForm","GetChatsAction","params","GetChatsSuccessAction","chats","GetChatsFailureAction","GetChatAction","chatId","GetChatSuccessAction","chat","GetChatFailureAction","chatsSelector","LastMessage","message","text","getContent","DialogPreview","ownProps","createSelector","get","getChat","unread_count","last_message","LastMessage_LastMessage","Chat","chatIds","Menu","NavLink","Settings","Messenger","getChats","limit","Menu_Menu","Switch","es_Route","path","exact","PrivateRoute","isConnecting","es_Redirect","GetCountryCodeAction","GetCountryCodeSuccessAction","GetCountryCodeFailureAction","App","getCountryCode","pure","ConnectedApp","addLocaleData","toConsumableArray","en","messages","require","TextComponent","ConnectedIntlProvider","locale","IntlProvider","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","apiHash","process","environmentDefault","apiId","isLoggerEnabled","useTestDC","environmentProduction","environment","initialState","SendMessageAction","data","SendMessageFailureAction","SendMessageSuccessAction","ReceiveMessageAction","isRegistered","Map","rootReducer","combineReducers","getType","actions","payload","toUpperCase","telegramActions","authorization_state","set","chat_id","newChat","GeoApiService","fetch","response","json","ip","country_code","appSaga","regenerator_default","wrap","_context","prev","next","sent","put","t0","stop","_marked","_context2","all","takeEvery","_marked2","worker","subscribeToTelegramWorker","dispatchMessage","sendMessage","telegramSaga","TelegramWorker","promises","channel","eventChannel","emit","onmessage","event","terminate","saga_marked","messageId","promise","reject","resolve","abrupt","saga_marked2","_context3","Error","asyncSendMessage","_marked3","warn","Promise","uuid","v4","postMessage","@extra","loadInitialData","@type","_context4","_marked4","updateAuthorization","authSaga","auth_saga_marked","auth_saga_marked2","phone_number","saga_marked3","saga_marked4","_context5","_marked5","_context6","_marked6","_context7","_marked7","LONG_MAX_VALUE","chatsSaga","offset_order","offsetOrder","offset_chat_id","offsetChatId","chat_ids","chats_saga_marked","chats_saga_marked2","chats_saga_marked3","rootSaga","store_saga_marked","logger","createLogger","predicate","sagaMiddleware","createSagaMiddleware","rootElement","document","getElementById","AppStore","preloadedState","store","createStore","applyMiddleware","run","configureStore","ReactDOM","es","textComponent","HashRouter","TAB_MODE_CLASSNAME","onMouseMove","body","classList","remove","removeEventListener","addEventListener","enableTabMode","URL","href","origin","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b18a0a49.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"telegram.worker.52812a8cb198fce0ad24.js\");\n};","import React from \"react\";\n\nexport type IconProps = {\n  className?: string;\n};\n\nexport const makeIcon = (iconId: string, className?: string) => {\n  return (\n    <svg className={className} focusable=\"false\">\n      <use xlinkHref={`#${iconId}`} />\n    </svg>\n  );\n};\n","import SpriteSymbol from \"svg-baker-runtime/browser-symbol\";\nimport sprite from \"svg-sprite-loader/runtime/browser-sprite.build\";\nvar symbol = new SpriteSymbol({\n  \"id\": \"logo\",\n  \"use\": \"logo-usage\",\n  \"viewBox\": \"0 0 240 240\",\n  \"content\": \"<symbol xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 240 240\\\" id=\\\"logo\\\"><defs><linearGradient id=\\\"logo_a\\\" x1=\\\".667\\\" y1=\\\".167\\\" x2=\\\".417\\\" y2=\\\".75\\\"><stop stop-color=\\\"#37aee2\\\" offset=\\\"0\\\" /><stop stop-color=\\\"#1e96c8\\\" offset=\\\"1\\\" /></linearGradient><linearGradient id=\\\"logo_b\\\" x1=\\\".66\\\" y1=\\\".437\\\" x2=\\\".851\\\" y2=\\\".802\\\"><stop stop-color=\\\"#eff7fc\\\" offset=\\\"0\\\" /><stop stop-color=\\\"#fff\\\" offset=\\\"1\\\" /></linearGradient></defs><circle cx=\\\"120\\\" cy=\\\"120\\\" r=\\\"120\\\" fill=\\\"url(#logo_a)\\\" /><path fill=\\\"#c8daea\\\" d=\\\"m98 175c-3.8876 0-3.227-1.4679-4.5678-5.1695L82 132.2059 170 80\\\" /><path fill=\\\"#a9c9dd\\\" d=\\\"m98 175c3 0 4.3255-1.372 6-3l16-15.558-19.958-12.035\\\" /><path fill=\\\"url(#logo_b)\\\" d=\\\"m100.04 144.41 48.36 35.729c5.5185 3.0449 9.5014 1.4684 10.876-5.1235l19.685-92.763c2.0154-8.0802-3.0801-11.745-8.3594-9.3482l-115.59 44.571c-7.8901 3.1647-7.8441 7.5666-1.4382 9.528l29.663 9.2583 68.673-43.325c3.2419-1.9659 6.2173-0.90899 3.7752 1.2584\\\" /></symbol>\"\n});\nvar result = sprite.add(symbol);\nexport default symbol","import { FunctionComponent } from \"react\";\nimport { IconProps, makeIcon } from \"../../../utils/makeIcon\";\nimport TelegramLogo from \"../../../assets/icons/logo.svg\";\n\nexport const LogoIcon: FunctionComponent<IconProps> = ({ className }) =>\n  makeIcon(TelegramLogo.id, className);\n","import block from \"bem-cn\";\nimport React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { LogoIcon } from \"../icons/LogoIcon\";\nimport \"./logo.scss\";\n\ntype LogoProps = {\n  title?: string | React.ReactNode;\n};\n\nexport const Logo: React.FunctionComponent<LogoProps> = ({ title }) => {\n  const bem = block(\"rt-logo\");\n\n  return (\n    <div className={bem()}>\n      <LogoIcon className={bem(\"icon\")} />\n\n      <div className={bem(\"title\")}>\n        <FormattedMessage\n          id={\"components.logo.title\"}\n          defaultMessage={\"Telegram\"}\n        />\n      </div>\n\n      {title && <div className={bem(\"subtitle\")}>{title}</div>}\n    </div>\n  );\n};\n","import React, { PureComponent } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Logo } from \"../../common/logo/Logo\";\nimport \"./styles.scss\";\n\nexport class AppLoading extends PureComponent {\n  render() {\n    return (\n      <div className=\"rt-app-loading\">\n        <div className=\"rt-app-loading__body\">\n          <Logo\n            title={\n              <FormattedMessage\n                id={\"components.app-loading.title\"}\n                defaultMessage={\"a new era of messaging\"}\n              />\n            }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, RouteProps } from \"react-router-dom\";\n\nimport { AppLoading } from \"./app-loading/AppLoading\";\nimport { RootState } from \"../../store/reducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    telegram: state.telegram,\n    app: state.app\n  };\n};\n\nexport const AppRoute: React.ComponentType<RouteProps> = connect(\n  mapStateToProps\n)((props: RouteProps & RootState) => {\n  const { component, telegram, app, ...restProps } = props;\n\n  const Component: React.ComponentType<any> = component as any;\n\n  return (\n    <Route\n      {...restProps}\n      render={(props) => {\n        if (!telegram.isReady || app.fetching) {\n          return <AppLoading />;\n        }\n\n        return <Component {...props} />;\n      }}\n    />\n  );\n}) as any;\n","export const SEND_MESSAGE_FETCHING = \"@@rt/telegram/send-message/fetching\";\nexport const SEND_MESSAGE_SUCCESS = \"@@rt/telegram/send-message/success\";\nexport const SEND_MESSAGE_FAILURE = \"@@rt/telegram/send-message/failure\";\n\nexport const RECEIVE_MESSAGE = \"@rt/telegram/receive-message\";\n\nexport const AUTHORIZATION_STATES = {\n  PHONE_NUMBER: \"authorizationStateWaitPhoneNumber\",\n  CODE: \"authorizationStateWaitCode\",\n  PASSWORD: \"authorizationStateWaitPassword\",\n  AUTHORIZED: \"authorizationStateReady\",\n  LOGGING_OUT: \"authorizationStateLoggingOut\",\n  LOADING: \"authorizationStateWaitEncryptionKey\",\n  WAIT_TDLIB: \"authorizationStateWaitTdlibParameters\",\n  CLOSED: \"authorizationStateClosed\"\n};\n\nexport type TelegramMessage = {\n  [key: string]: any;\n};\n\nexport type TelegramMessagePayload = {\n  data: TelegramMessage;\n};\n\nexport const TELEGRAM_MESSAGE_TYPES = {\n  UPDATE_CONNECTION_STATE: \"updateConnectionState\",\n  UPDATE_AUTHORIZATION_STATE: \"updateAuthorizationState\",\n  UPDATE_OPTION: \"updateOption\",\n  UPDATE_CHAT_READ_INBOX: \"updateChatReadInbox\",\n  READY: \"ok\"\n};\n\nexport const TELEGRAM_CONNECTION_STATE = {\n  CONNECTING: \"connectionStateConnecting\",\n  READY: \"connectionStateReady\"\n};\n\nexport const TELEGRAM_AUTHETNTICATION_CODE_TYPES = {\n  SMS: \"authenticationCodeTypeSms\",\n  MESSAGE: \"authenticationCodeTypeTelegramMessage\"\n};\n\nexport type TelegramOptions = {\n  animation_search_bot_username: string;\n  authorization_date: number;\n  basic_group_size_max: number;\n  call_connect_timeout_ms: number;\n  call_packet_timeout_ms: number;\n  calls_enabled: boolean;\n  favorite_stickers_limit: number;\n  forwarded_message_count_max: number;\n  message_caption_length_max: number;\n  message_text_length_max: number;\n  my_id: number;\n  photo_search_bot_username: string;\n  pinned_chat_count_max: number;\n  supergroup_size_max: number;\n  t_me_url: string;\n  test_mode: boolean;\n  venue_search_bot_username: string;\n  version: string;\n  [key: string]: any;\n};\n","import { createAction } from \"typesafe-actions\";\nimport * as types from \"./types\";\n\nexport const LogoutAction = createAction(types.LOGOUT_FETCHING);\nexport const LogoutSuccessAction = createAction(types.LOGOUT_SUCCESS);\nexport const LogoutFailureAction = createAction(types.LOGOUT_FAILURE);\n\nexport const LoginSuccessAction = createAction(types.LOGIN_SUCCESS);\n\nexport const SetPhoneNumberAction = createAction(\n  types.SET_PHONE_NUMBER,\n  (action) => (phone: string) => action({ phone })\n);\nexport const SetPhoneNumberSuccessAction = createAction(\n  types.SET_PHONE_NUMBER_SUCCESS\n);\nexport const SetPhoneNumberFailureAction = createAction(\n  types.SET_PHONE_NUMBER_FAILURE\n);\n\nexport const SetCodeAction = createAction(\n  types.SET_CODE,\n  (action) => (code: string) => action({ code })\n);\nexport const SetCodeSuccessAction = createAction(types.SET_CODE_SUCCESS);\nexport const SetCodeFailureAction = createAction(types.SET_CODE_FAILURE);\n\nexport const ResendCodeAction = createAction(types.RESEND_CODE);\nexport const ResendCodeSuccessAction = createAction(types.RESEND_CODE_SUCCESS);\nexport const ResendCodeFailureAction = createAction(types.RESEND_CODE_FAILURE);\n\nexport const CheckPasswordAction = createAction(\n  types.CHECK_PASSWORD,\n  (action) => (password: string) => action({ password })\n);\nexport const CheckPasswordSuccessAction = createAction(\n  types.CHECK_PASSWORD_SUCCESS\n);\nexport const CheckPasswordFailureAction = createAction(\n  types.CHECK_PASSWORD_FAILURE\n);\n","export const LOGOUT_FETCHING = \"@@rt/auth/logout/fetching\";\nexport const LOGOUT_SUCCESS = \"@@rt/auth/logout/success\";\nexport const LOGOUT_FAILURE = \"@@rt/auth/logout/failure\";\n\nexport const LOGIN_SUCCESS = \"@rt/auth/login/success\";\n\nexport const SET_PHONE_NUMBER = \"@rt/auth/set-phone-number/fetching\";\nexport const SET_PHONE_NUMBER_SUCCESS = \"@rt/auth/set-phone-number/success\";\nexport const SET_PHONE_NUMBER_FAILURE = \"@rt/auth/set-phone-number/failure\";\n\nexport const SET_CODE = \"@rt/auth/set-code/fetching\";\nexport const SET_CODE_SUCCESS = \"@rt/auth/set-code/success\";\nexport const SET_CODE_FAILURE = \"@rt/auth/set-code/failure\";\n\nexport const RESEND_CODE = \"@rt/auth/resend-code/fetching\";\nexport const RESEND_CODE_SUCCESS = \"@rt/auth/resend-code/success\";\nexport const RESEND_CODE_FAILURE = \"@rt/auth/resend-code/failure\";\n\nexport const CHECK_PASSWORD = \"@rt/auth/check-password/fetching\";\nexport const CHECK_PASSWORD_SUCCESS = \"@rt/auth/check-password/success\";\nexport const CHECK_PASSWORD_FAILURE = \"@rt/auth/check-password/failure\";\n","import SpriteSymbol from \"svg-baker-runtime/browser-symbol\";\nimport sprite from \"svg-sprite-loader/runtime/browser-sprite.build\";\nvar symbol = new SpriteSymbol({\n  \"id\": \"spinner\",\n  \"use\": \"spinner-usage\",\n  \"viewBox\": \"0 0 100 100\",\n  \"content\": \"<symbol class=\\\"lds-spinner\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 100 100\\\" preserveAspectRatio=\\\"xMidYMid\\\" id=\\\"spinner\\\"><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.9166666666666666s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(30 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.8333333333333334s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(60 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.75s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(90 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.6666666666666666s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(120 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.5833333333333334s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(150 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.5s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(180 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.4166666666666667s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(210 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.3333333333333333s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(240 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.25s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(270 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.16666666666666666s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(300 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.08333333333333333s\\\" repeatCount=\\\"indefinite\\\"></animate></rect><rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" transform=\\\"rotate(330 50 50)\\\"><animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"0s\\\" repeatCount=\\\"indefinite\\\"></animate></rect></symbol>\"\n});\nvar result = sprite.add(symbol);\nexport default symbol","import React, { FunctionComponent } from \"react\";\nimport { IconProps, makeIcon } from \"../../../utils/makeIcon\";\nimport spinnerIcon from \"../../../assets/icons/spinner.svg\";\n\nexport const SpinnerIcon: FunctionComponent<IconProps> = ({ className }) =>\n  makeIcon(spinnerIcon.id, className);\n","import block from \"bem-cn\";\nimport classNames from \"classnames\";\nimport React, { ButtonHTMLAttributes, PureComponent } from \"react\";\nimport { SpinnerIcon } from \"../icons/SpinnerIcon\";\nimport \"./styles.scss\";\n\ntype ButtonProps = {\n  loading?: boolean;\n} & ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport class Button extends PureComponent<ButtonProps> {\n  render() {\n    const { className, loading, ...restProps } = this.props;\n\n    const bem = block(\"rt-button\");\n\n    const rootClassNames = classNames({\n      [bem.is({ loading: Boolean(loading) })]: true,\n      [className as string]: className\n    });\n\n    return (\n      <button {...restProps} className={rootClassNames}>\n        {this.props.children}\n        {loading && <SpinnerIcon className={bem(\"loading-icon\")} />}\n      </button>\n    );\n  }\n}\n","import block from \"bem-cn\";\nimport React, { InputHTMLAttributes, PureComponent } from \"react\";\nimport { Field } from \"react-final-form\";\nimport \"./styles.scss\";\n\ntype InputProps = {\n  name: string;\n  validate?: (value: string) => any;\n  errorMessage?: string;\n} & InputHTMLAttributes<HTMLInputElement>;\n\nexport class Input extends PureComponent<InputProps> {\n  render(): React.ReactNode {\n    const { name, errorMessage, validate, ...restProps } = this.props;\n\n    const bem = block(\"rt-input\");\n\n    return (\n      <Field name={name} validate={validate}>\n        {({ input, meta }) => {\n          const hasError = meta.touched && meta.error;\n\n          return (\n            <div className={bem()}>\n              <input {...input} {...restProps} className={bem(\"input\")} />\n\n              {hasError && (\n                <div className={bem(\"error\")}>{errorMessage || meta.error}</div>\n              )}\n            </div>\n          );\n        }}\n      </Field>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { LogoutAction } from \"../../../store/auth/actions\";\nimport { AuthState } from \"../../../store/auth/reducer\";\nimport { RootState } from \"../../../store/reducer\";\nimport { Button } from \"../../common/button/Button\";\n\ntype OwnProps = {\n  title?: string | React.ReactNode;\n};\n\ntype StateProps = AuthState;\n\ntype DispatchProps = {\n  logout: typeof LogoutAction;\n};\n\ntype LogoutButtonProps = OwnProps & DispatchProps & StateProps;\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return bindActionCreators(\n    {\n      logout: LogoutAction\n    },\n    dispatch\n  );\n};\n\nconst mapStateToProps = (state: RootState) => {\n  return state.auth;\n};\n\n@((connect as any)(mapStateToProps, mapDispatchToProps))\nclass ConnectedLogoutButton extends PureComponent<LogoutButtonProps> {\n  render() {\n    const { title, logout, isLoggingOut } = this.props;\n    return (\n      <Button\n        className=\"ri-logout-button\"\n        onClick={logout}\n        loading={isLoggingOut}>\n        {title || (\n          <FormattedMessage\n            id={\"components.logout-button.title\"}\n            defaultMessage={\"Logout\"}\n          />\n        )}\n      </Button>\n    );\n  }\n}\n\nexport const LogoutButton = (ConnectedLogoutButton as unknown) as React.ComponentType<\n  OwnProps\n>;\n","import block from \"bem-cn\";\nimport React, { PureComponent } from \"react\";\nimport { Form } from \"react-final-form\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { ResendCodeAction, SetCodeAction } from \"../../../store/auth/actions\";\nimport { AuthState } from \"../../../store/auth/reducer\";\nimport { RootState } from \"../../../store/reducer\";\nimport { Button } from \"../../common/button/Button\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Input } from \"../../forms/input/Input\";\nimport { LogoutButton } from \"../logout-button/LogoutButton\";\nimport \"./styles.scss\";\n\ntype StateProps = AuthState;\n\ntype DispatchProps = {\n  setCode: typeof SetCodeAction;\n  resendCode: typeof ResendCodeAction;\n};\n\ntype OwnProps = {};\n\ntype CodeFormProps = OwnProps & DispatchProps & StateProps;\n\ntype FormValues = {\n  code?: string;\n};\n\nconst mapStateToProps = (state: RootState) => {\n  return state.auth;\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return bindActionCreators(\n    {\n      setCode: SetCodeAction,\n      resendCode: ResendCodeAction\n    },\n    dispatch\n  );\n};\n\n@((connect as any)(mapStateToProps, mapDispatchToProps))\nclass ConnectedCodeForm extends PureComponent<CodeFormProps> {\n  onSubmit = ({ code }: FormValues) => {\n    if (code) {\n      this.props.setCode(code);\n    }\n  };\n\n  resendCode = () => {\n    this.props.resendCode();\n  };\n\n  render() {\n    const bem = block(\"rt-code-form\");\n\n    return (\n      <Form onSubmit={this.onSubmit}>\n        {({ handleSubmit }) => {\n          return (\n            <form onSubmit={handleSubmit} className={bem()}>\n              <h1 className=\"rt-h1\">\n                <FormattedMessage\n                  id={\"components.code-form.title\"}\n                  defaultMessage={\"Enter code\"}\n                />\n              </h1>\n\n              <div className={bem(\"input\")}>\n                <Input name=\"code\" type=\"number\" autoFocus={true} />\n              </div>\n\n              <div className={bem(\"actions\")}>\n                <Button type=\"button\" onClick={this.resendCode}>\n                  <FormattedMessage\n                    id=\"components.code-form.resend\"\n                    defaultMessage={\"Resend\"}\n                  />\n                </Button>\n\n                <Button\n                  className=\"rt-button--primary\"\n                  loading={this.props.isFetching}>\n                  <FormattedMessage\n                    id=\"components.code-form.submit\"\n                    defaultMessage={\"Next\"}\n                  />\n                </Button>\n              </div>\n\n              <LogoutButton\n                title={\n                  <FormattedMessage\n                    id={\"components.code-form.logout\"}\n                    defaultMessage={\"Use different number?\"}\n                  />\n                }\n              />\n            </form>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport const CodeForm = (ConnectedCodeForm as unknown) as React.ComponentType<\n  OwnProps\n>;\n","import React, { PureComponent } from \"react\";\nimport { Form } from \"react-final-form\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { CheckPasswordAction } from \"../../../store/auth/actions\";\nimport { AuthState } from \"../../../store/auth/reducer\";\nimport { RootState } from \"../../../store/reducer\";\nimport { Input } from \"../../forms/input/Input\";\n\ntype FormValues = {\n  password?: string;\n};\n\ntype OwnProps = {};\n\ntype StateProps = AuthState;\n\ntype DispatchProps = {\n  checkPassword: typeof CheckPasswordAction;\n};\n\ntype PasswordFormProps = OwnProps & StateProps & DispatchProps;\n\nconst mapStateToProps = (state: RootState) => {\n  return state.auth;\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return bindActionCreators(\n    {\n      checkPassword: CheckPasswordAction\n    },\n    dispatch\n  );\n};\n\n@((connect as any)(mapStateToProps, mapDispatchToProps))\nclass ConnectedPasswordForm extends PureComponent<PasswordFormProps> {\n  onSubmit = ({ password }: FormValues) => {\n    if (password) {\n      this.props.checkPassword(password);\n    }\n  };\n\n  render() {\n    return (\n      <Form onSubmit={this.onSubmit}>\n        {({ handleSubmit }) => {\n          return (\n            <form onSubmit={handleSubmit} className=\"rt-password-form\">\n              <h1>Enter password</h1>\n\n              <Input name={\"password\"} type={\"password\"} />\n\n              <button>submit</button>\n            </form>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport const PasswordForm = (ConnectedPasswordForm as unknown) as React.ComponentType<\n  OwnProps\n>;\n","import block from \"bem-cn\";\nimport React, { PureComponent, SelectHTMLAttributes } from \"react\";\nimport Select from \"react-select\";\n\ntype Option = {\n  value: string;\n  label: string;\n  icon: React.FunctionComponent<{ value: string }>;\n};\n\ntype PhoneNumberCountrySelectProps = {\n  name: string;\n  onChange: (value: string | undefined) => void;\n  options: Option[];\n} & SelectHTMLAttributes<HTMLSelectElement>;\n\nconst NO_COUNTRY = \"ZZ\";\n\nexport class PhoneNumberCountrySelect extends PureComponent<\n  PhoneNumberCountrySelectProps\n> {\n  static defaultProps: Partial<PhoneNumberCountrySelectProps> = {\n    value: NO_COUNTRY\n  };\n\n  onChange = (option: Option) => {\n    const { onChange } = this.props;\n\n    onChange(option.value === NO_COUNTRY ? undefined : option.value);\n  };\n\n  render() {\n    const bem = block(\"rt-phone-number-country-select\");\n\n    const { value, options, onBlur, onFocus } = this.props;\n\n    const fixedOptions = options.map((option: Option) => {\n      return {\n        ...option,\n        value: option.value || NO_COUNTRY\n      };\n    });\n\n    const selectedOption = fixedOptions.find(\n      (option: Option) => option.value === value\n    );\n\n    return (\n      <React.Fragment>\n        {selectedOption &&\n          React.createElement(selectedOption.icon, {\n            value: selectedOption.value\n          })}\n\n        <div className={bem()}>\n          <Select\n            value={selectedOption}\n            className={bem(\"select\")}\n            options={fixedOptions}\n            onBlur={onBlur as any}\n            onFocus={onFocus as any}\n            onChange={this.onChange as any}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import block from \"bem-cn\";\nimport React, { InputHTMLAttributes, PureComponent } from \"react\";\nimport { Field } from \"react-final-form\";\nimport PhoneInput from \"react-phone-number-input\";\nimport { connect } from \"react-redux\";\nimport { RootState } from \"../../../store/reducer\";\nimport { PhoneNumberCountrySelect } from \"../phone-number-input-select/PhoneNumberCountrySelect\";\nimport \"./styles.scss\";\n\ntype PhoneNumberInputProps = {\n  name: string;\n  validate?: (value: string) => any;\n  errorMessage?: string;\n  country?: string;\n} & InputHTMLAttributes<HTMLInputElement>;\n\nconst mapStateToProps = (state: RootState) => {\n  return { country: state.app.countryCode };\n};\n\n@((connect as any)(mapStateToProps))\nexport class PhoneNumberInput extends PureComponent<PhoneNumberInputProps> {\n  private ref = React.createRef<any>();\n\n  componentDidMount(): void {\n    this.ref.current && this.ref.current.input.focus();\n  }\n\n  render() {\n    const { name, country } = this.props;\n\n    const bem = block(\"rt-phone-number-input\");\n\n    return (\n      <Field name={name}>\n        {({ input }) => {\n          return (\n            <PhoneInput\n              ref={this.ref}\n              value={input.value}\n              className={bem()}\n              inputClassName={bem(\"input\").toString()}\n              international={false}\n              country={country}\n              onChange={input.onChange}\n              countrySelectComponent={PhoneNumberCountrySelect as any}\n            />\n          );\n        }}\n      </Field>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport { Form } from \"react-final-form\";\nimport { FormattedMessage } from \"react-intl\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { SetPhoneNumberAction } from \"../../../store/auth/actions\";\nimport { AuthState } from \"../../../store/auth/reducer\";\nimport { RootState } from \"../../../store/reducer\";\nimport { Button } from \"../../common/button/Button\";\nimport { Logo } from \"../../common/logo/Logo\";\nimport { PhoneNumberInput } from \"../../forms/phone-number-input/PhoneNumberInput\";\nimport \"./styles.scss\";\n\ntype OwnProps = {};\n\ntype PhoneFormProps = AuthState & DispatchProps & OwnProps;\n\ntype DispatchProps = {\n  setPhoneNumber: typeof SetPhoneNumberAction;\n};\n\ntype FormValues = {\n  phone?: string;\n};\n\nconst mapStateToProps = (state: RootState): AuthState => {\n  return state.auth;\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return bindActionCreators(\n    {\n      setPhoneNumber: SetPhoneNumberAction\n    },\n    dispatch\n  );\n};\n\n@((connect as any)(mapStateToProps, mapDispatchToProps))\nclass ConnectedPhoneForm extends PureComponent<PhoneFormProps> {\n  onSubmit = ({ phone }: FormValues) => {\n    if (phone) {\n      this.props.setPhoneNumber(phone);\n    }\n  };\n\n  render() {\n    const { isFetching } = this.props;\n\n    return (\n      <Form onSubmit={this.onSubmit}>\n        {({ handleSubmit }) => {\n          return (\n            <form onSubmit={handleSubmit} className=\"rt-phone-form\">\n              <div className=\"rt-phone-form__header\">\n                <Logo\n                  title={\n                    <FormattedMessage\n                      id={\"components.phone-form.subtitle\"}\n                      defaultMessage={\"Welcome to the web application\"}\n                    />\n                  }\n                />\n              </div>\n\n              <div className=\"rt-phone-form__body\">\n                <PhoneNumberInput name={\"phone\"} />\n\n                <Button\n                  className=\"rt-phone-form__submit rt-button--primary\"\n                  loading={isFetching}>\n                  <FormattedMessage\n                    id={\"components.phone-form.submit\"}\n                    defaultMessage={\"Next\"}\n                  />\n                </Button>\n              </div>\n            </form>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport const PhoneForm = (ConnectedPhoneForm as unknown) as React.ComponentType<\n  OwnProps\n>;\n","import block from \"bem-cn\";\nimport React, { PureComponent } from \"react\";\nimport { AUTHORIZATION_STATES } from \"../../../store/telegram/types\";\nimport { CodeForm } from \"../code-form/CodeForm\";\nimport { PasswordForm } from \"../password-form/PasswordForm\";\nimport { PhoneForm } from \"../phone-form/PhoneForm\";\nimport \"./styles.scss\";\n\ntype LoginFormProps = {\n  state: Nullable<string>;\n};\n\nexport class LoginForm extends PureComponent<LoginFormProps> {\n  render() {\n    const bem = block(\"rt-login-form\");\n\n    return <div className={bem()}>{this.renderForm()}</div>;\n  }\n\n  renderForm(): React.ReactNode {\n    const { state } = this.props;\n\n    switch (state) {\n      case AUTHORIZATION_STATES.PHONE_NUMBER: {\n        return <PhoneForm />;\n      }\n\n      case AUTHORIZATION_STATES.CODE: {\n        return <CodeForm />;\n      }\n\n      case AUTHORIZATION_STATES.PASSWORD: {\n        return <PasswordForm />;\n      }\n\n      default: {\n        return state;\n      }\n    }\n  }\n}\n","import block from \"bem-cn\";\nimport React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { FormattedMessage } from \"react-intl\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router\";\nimport { AuthState } from \"../../../store/auth/reducer\";\nimport { RootState } from \"../../../store/reducer\";\nimport { LoginForm } from \"../../auth/login-form/LoginForm\";\nimport \"./styles.scss\";\n\ntype OwnProps = {};\ntype LoginProps = OwnProps & AuthState;\n\nconst mapStateToProps = (state: RootState): AuthState => {\n  return state.auth;\n};\n\n@((connect as any)(mapStateToProps))\nclass ConnectedLogin extends Component<LoginProps> {\n  render() {\n    const bem = block(\"rt-login\");\n\n    const { authState, isAuthorized } = this.props;\n\n    if (isAuthorized) {\n      return <Redirect to={\"/\"} />;\n    }\n\n    return (\n      <div className={bem()}>\n        <FormattedMessage\n          id={\"common.pages.login.title\"}\n          defaultMessage={\"Telegram | Sign in\"}>\n          {(title) => (\n            <Helmet>\n              <title>{title}</title>\n            </Helmet>\n          )}\n        </FormattedMessage>\n\n        <div className={bem(\"body\")}>\n          <LoginForm state={authState} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const Login = (ConnectedLogin as unknown) as React.ComponentType<\n  OwnProps\n>;\n","import { createAction } from \"typesafe-actions\";\nimport {\n  Chat,\n  GET_CHAT,\n  GET_CHAT_FAILURE,\n  GET_CHAT_SUCCESS,\n  GET_CHATS,\n  GET_CHATS_FAILURE,\n  GET_CHATS_SUCCESS,\n  GetChatsParams\n} from \"./types\";\n\nexport const GetChatsAction = createAction(\n  GET_CHATS,\n  (action) => (params: GetChatsParams) => action({ params })\n);\nexport const GetChatsSuccessAction = createAction(\n  GET_CHATS_SUCCESS,\n  (action) => (chats: number[]) =>\n    action({\n      chats\n    })\n);\nexport const GetChatsFailureAction = createAction(GET_CHATS_FAILURE);\n\nexport const GetChatAction = createAction(\n  GET_CHAT,\n  (action) => (chatId: number) => action({ chatId })\n);\nexport const GetChatSuccessAction = createAction(\n  GET_CHAT_SUCCESS,\n  (action) => (chat: Chat) => action({ chat })\n);\nexport const GetChatFailureAction = createAction(GET_CHAT_FAILURE);\n","export const GET_CHATS = \"@rt/chats/get/fetching\";\nexport const GET_CHATS_SUCCESS = \"@rt/chats/get/success\";\nexport const GET_CHATS_FAILURE = \"@rt/chats/get/failure\";\n\nexport const GET_CHAT = \"@rt/chats/chat-get/fetching\";\nexport const GET_CHAT_SUCCESS = \"@rt/chats/chat-get/success\";\nexport const GET_CHAT_FAILURE = \"@rt/chats/chat-get/failure\";\n\nexport type GetChatsParams = {\n  limit: number;\n  offsetOrder?: number;\n  offsetChatId?: number;\n};\n\nexport type Chat = {\n  id: number;\n  title?: string;\n  unread_count: number;\n  unread_mention_count: number;\n  last_message: any;\n};\n","import { createSelector } from \"reselect\";\nimport { RootState } from \"../reducer\";\nimport { ChatsState } from \"./reducer\";\n\nconst chatsSelector = (state: RootState) => state.chats;\n\nexport const chatSelector = (chatId: number) => {\n  return createSelector(\n    chatsSelector,\n    ({ chats }: ChatsState) => {\n      return chats.get(chatId);\n    }\n  );\n};\n","import block from \"bem-cn\";\nimport React, { PureComponent } from \"react\";\n\ntype OwnProps = {\n  message: any;\n};\n\nexport class LastMessage extends PureComponent<OwnProps> {\n  private getContent(): string {\n    const { message } = this.props;\n\n    return message.content.text ? message.content.text.text : \"not text\";\n  }\n\n  render() {\n    const bem = block(\"rt-last-message\");\n\n    return <div className={bem()}>{this.getContent()}</div>;\n  }\n}\n","import block from \"bem-cn\";\nimport React, { PureComponent } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { GetChatAction } from \"../../../../store/chats/actions\";\nimport { chatSelector } from \"../../../../store/chats/selectors\";\nimport { Chat } from \"../../../../store/chats/types\";\nimport { RootState } from \"../../../../store/reducer\";\nimport \"./styles.scss\";\nimport { LastMessage } from \"../last-message/LastMessage\";\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  chat: Chat;\n};\ntype DispatchProps = {\n  getChat: typeof GetChatAction;\n};\n\ntype DialogPreviewProps = OwnProps & StateProps & DispatchProps;\n\nconst mapStateToProps = (state: RootState, ownProps: OwnProps) => {\n  return {\n    chat: chatSelector(ownProps.chatId)(state)\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return bindActionCreators({ getChat: GetChatAction }, dispatch);\n};\n\n@((connect as any)(mapStateToProps, mapDispatchToProps))\nclass ConnectedDialogPreview extends PureComponent<DialogPreviewProps> {\n  componentDidMount(): void {\n    const { chat, chatId } = this.props;\n\n    if (!chat) {\n      this.props.getChat(chatId);\n    }\n  }\n\n  render() {\n    const bem = block(\"rt-dialog-preview\");\n\n    const { chat } = this.props;\n\n    const { title, unread_count, last_message } = chat || ({} as any);\n\n    return (\n      <div className={bem()}>\n        <div className={bem(\"photo\")} />\n\n        <div className={bem(\"title\")}>{title}</div>\n\n        {last_message && (\n          <div className={bem(\"message\")}>\n            <LastMessage message={last_message} />\n          </div>\n        )}\n\n        {unread_count > 0 && (\n          <div className={bem(\"unread\")}>{unread_count}</div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport const DialogPreview = (ConnectedDialogPreview as unknown) as React.ComponentClass<\n  OwnProps\n>;\n","import block from \"bem-cn\";\nimport React, { PureComponent } from \"react\";\nimport { connect } from \"react-redux\";\nimport { ChatsState } from \"../../../store/chats/reducer\";\nimport { RootState } from \"../../../store/reducer\";\nimport { DialogPreview } from \"./dialog-preview/DialogPreview\";\nimport \"./styles.scss\";\n\ntype OwnProps = {};\ntype StateProps = {\n  chats: ChatsState;\n};\ntype ChatProps = OwnProps & StateProps;\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    chats: state.chats\n  };\n};\n\n@((connect as any)(mapStateToProps))\nclass ConnectedChat extends PureComponent<ChatProps> {\n  render() {\n    const bem = block(\"rt-chat\");\n    const { chatIds } = this.props.chats;\n\n    return (\n      <div className={bem()}>\n        <div className={bem(\"dialogs\")}>\n          {chatIds.map((chatId) => {\n            return <DialogPreview key={chatId} chatId={chatId} />;\n          })}\n        </div>\n\n        <div className={bem(\"body\")} />\n      </div>\n    );\n  }\n}\n\nexport const Chat = (ConnectedChat as unknown) as React.ComponentClass<\n  OwnProps\n>;\n","import block from \"bem-cn\";\nimport React, { PureComponent } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./styles.scss\";\n\nexport class Menu extends PureComponent {\n  render() {\n    const bem = block(\"rt-menu\");\n\n    return (\n      <div className={bem()}>\n        <div className={bem(\"items\")}>\n          <NavLink to={\"/\"}>Chat</NavLink>\n\n          <NavLink to={\"/settings\"}>Settings</NavLink>\n        </div>\n      </div>\n    );\n  }\n}\n","import block from \"bem-cn\";\nimport React, { PureComponent } from \"react\";\nimport { LogoutButton } from \"../../auth/logout-button/LogoutButton\";\n\nexport class Settings extends PureComponent {\n  render() {\n    const bem = block(\"rt-settings\");\n\n    return (\n      <div className={bem()}>\n        <LogoutButton />\n      </div>\n    );\n  }\n}\n","import block from \"bem-cn\";\nimport React, { PureComponent } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { FormattedMessage } from \"react-intl\";\nimport { connect } from \"react-redux\";\nimport { Route, Switch } from \"react-router\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { GetChatsAction } from \"../../../store/chats/actions\";\nimport { Chat } from \"../../messenger/chat/Chat\";\nimport { Menu } from \"../../messenger/menu/Menu\";\nimport { Settings } from \"../../messenger/settings/Settings\";\nimport \"./styles.scss\";\n\ntype OwnProps = {};\ntype DispatchProps = {\n  getChats: typeof GetChatsAction;\n};\n\ntype MessengerProps = OwnProps & DispatchProps;\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return bindActionCreators(\n    {\n      getChats: GetChatsAction\n    },\n    dispatch\n  );\n};\n\n@((connect as any)(null, mapDispatchToProps))\nclass ConnectedMessenger extends PureComponent<MessengerProps> {\n  componentDidMount(): void {\n    this.props.getChats({\n      limit: 25\n    });\n  }\n\n  render() {\n    const bem = block(\"rt-messenger\");\n\n    return (\n      <div className={bem()}>\n        <FormattedMessage\n          id={\"common.pages.messenger.title\"}\n          defaultMessage={\"Telegram\"}>\n          {(title) => (\n            <Helmet>\n              <title>{title}</title>\n            </Helmet>\n          )}\n        </FormattedMessage>\n\n        <div className={bem(\"body\")}>\n          <Menu />\n\n          <Switch>\n            <Route path={\"/\"} exact={true} component={Chat} />\n            <Route path={\"/settings\"} exact={true} component={Settings} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const Messenger = (ConnectedMessenger as unknown) as React.ComponentClass<\n  OwnProps\n>;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect, Route, RouteProps } from \"react-router-dom\";\n\nimport { AppLoading } from \"./app-loading/AppLoading\";\nimport { RootState } from \"../../store/reducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return state;\n};\n\nexport const PrivateRoute: React.ComponentType<RouteProps> = connect(\n  mapStateToProps\n)((props: RouteProps & RootState) => {\n  const { component, telegram, auth, app, ...restProps } = props;\n\n  const Component: React.ComponentType<any> = component as any;\n\n  return (\n    <Route\n      {...restProps}\n      render={(props) => {\n        if (!telegram.isReady || app.fetching || auth.isConnecting) {\n          return <AppLoading />;\n        }\n\n        if (!auth.isAuthorized) {\n          return <Redirect to={\"/login\"} />;\n        }\n\n        return <Component {...props} />;\n      }}\n    />\n  );\n}) as any;\n","import { createAction } from \"typesafe-actions\";\nimport {\n  GET_COUNTRY_CODE,\n  GET_COUNTRY_CODE_FAILURE,\n  GET_COUNTRY_CODE_SUCCESS\n} from \"./types\";\n\nexport const GetCountryCodeAction = createAction(GET_COUNTRY_CODE);\nexport const GetCountryCodeSuccessAction = createAction(\n  GET_COUNTRY_CODE_SUCCESS,\n  (action) => (countryCode: string) => action({ countryCode })\n);\nexport const GetCountryCodeFailureAction = createAction(\n  GET_COUNTRY_CODE_FAILURE\n);\n","export const GET_COUNTRY_CODE = \"@rt/app/get-country-code/fetching\";\nexport const GET_COUNTRY_CODE_SUCCESS = \"@rt/app/get-country-code/success\";\nexport const GET_COUNTRY_CODE_FAILURE = \"@rt/app/get-country-code/failure\";\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Switch } from \"react-router\";\nimport \"./assets/styles/main.scss\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { AppRoute } from \"./components/pages/AppRoute\";\nimport { Login } from \"./components/pages/login/Login\";\nimport { Messenger } from \"./components/pages/messenger/Messenger\";\nimport { PrivateRoute } from \"./components/pages/PrivateRoute\";\nimport { GetCountryCodeAction } from \"./store/app/actions\";\nimport { AppState } from \"./store/app/reducer\";\nimport { RootState } from \"./store/reducer\";\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return bindActionCreators(\n    {\n      getCountryCode: GetCountryCodeAction\n    },\n    dispatch\n  );\n};\n\nconst mapStateToProps = (state: RootState): AppState => {\n  return state.app;\n};\n\ntype OwnProps = {};\n\ntype DispatchProps = {\n  getCountryCode: typeof GetCountryCodeAction;\n};\n\ntype AppProps = OwnProps & DispatchProps & AppState;\n\n@((connect as any)(mapStateToProps, mapDispatchToProps, null, { pure: false }))\nclass ConnectedApp extends Component<AppProps> {\n  constructor(props: AppProps) {\n    super(props);\n\n    if (!props.countryCode) {\n      props.getCountryCode();\n    }\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div className=\"rt-app\">\n        <Switch>\n          <AppRoute path={\"/login\"} exact={true} component={Login} />\n\n          <PrivateRoute path=\"/\" component={Messenger} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport const App = (ConnectedApp as unknown) as React.ComponentClass<OwnProps>;\n","import { IntlProvider, addLocaleData } from \"react-intl\";\nimport { connect } from \"react-redux\";\nimport * as en from \"react-intl/locale-data/en\";\n\naddLocaleData([...en]);\n\nexport const messages = {\n  en: require(\"../../../locales/en.json\")\n};\n\nexport const TextComponent = (props: any) => {\n  return props.children;\n};\n\nfunction mapStateToProps(): any {\n  const locale = \"en\";\n\n  return {\n    locale,\n    messages: { ...messages.en, ...messages[locale] }\n  };\n}\n\nexport const ConnectedIntlProvider = connect(mapStateToProps)(IntlProvider);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { IEnvironment } from \"./environment\";\n\nconst apiId = process.env.REACT_APP_TELEGRAM_API_ID;\nconst apiHash = process.env.REACT_APP_TELEGRAM_API_HASH;\n\nif (!apiId || !apiHash) {\n  throw new Error(\"api_id and api_hash are not defined\");\n}\n\nexport const environmentDefault: IEnvironment = {\n  apiId,\n  apiHash,\n  isLoggerEnabled: true,\n  useTestDC: !process.env.REACT_APP_TELEGRAM_PRODUCTION_DC\n};\n","import { IEnvironment } from \"./environment\";\nimport { environmentDefault } from \"./environmentDefault\";\n\nexport const environmentProduction: IEnvironment = {\n  ...environmentDefault,\n  isLoggerEnabled: false\n};\n","import { environmentDefault } from \"./environmentDefault\";\nimport { environmentProduction } from \"./environmentProduction\";\n\nexport interface IEnvironment {\n  apiId: string;\n  apiHash: string;\n  isLoggerEnabled: boolean;\n  useTestDC: boolean;\n}\n\nexport let environment: IEnvironment = {\n  ...environmentDefault\n};\n\nif (process.env.NODE_ENV === \"production\") {\n  environment = {\n    ...environmentProduction\n  };\n}\n","import { ActionType, getType } from \"typesafe-actions\";\nimport * as actions from \"./actions\";\n\nexport type AppAction = ActionType<typeof actions>;\n\nexport type AppState = {\n  fetching: boolean;\n  countryCode: Nullable<string>;\n};\n\nconst initialState: AppState = {\n  fetching: false,\n  countryCode: \"US\"\n};\n\nexport const appReducer = (\n  state = initialState,\n  action: AppAction\n): AppState => {\n  switch (action.type) {\n    case getType(actions.GetCountryCodeAction): {\n      return {\n        ...state,\n        fetching: true\n      };\n    }\n\n    case getType(actions.GetCountryCodeSuccessAction): {\n      const countryCode = action.payload.countryCode.toUpperCase();\n\n      return {\n        ...state,\n        fetching: false,\n        countryCode: countryCode || initialState.countryCode\n      };\n    }\n\n    case getType(actions.GetCountryCodeFailureAction): {\n      return {\n        ...state,\n        fetching: false\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import { createAction } from \"typesafe-actions\";\nimport {\n  RECEIVE_MESSAGE,\n  SEND_MESSAGE_FAILURE,\n  SEND_MESSAGE_FETCHING,\n  SEND_MESSAGE_SUCCESS,\n  TelegramMessage,\n  TelegramMessagePayload\n} from \"./types\";\n\nexport const SendMessageAction = createAction(\n  SEND_MESSAGE_FETCHING,\n  (action) => (data: TelegramMessage) => action(data)\n);\nexport const SendMessageFailureAction = createAction(SEND_MESSAGE_FAILURE);\nexport const SendMessageSuccessAction = createAction(SEND_MESSAGE_SUCCESS);\n\nexport const ReceiveMessageAction = createAction(\n  RECEIVE_MESSAGE,\n  (action) => (data: TelegramMessagePayload) => action(data)\n);\n","import { ActionType, getType } from \"typesafe-actions\";\nimport * as telegramActions from \"../telegram/actions\";\nimport { TelegramAction } from \"../telegram/reducer\";\nimport {\n  AUTHORIZATION_STATES,\n  TELEGRAM_MESSAGE_TYPES\n} from \"../telegram/types\";\nimport * as actions from \"./actions\";\n\nexport type AuthState = {\n  readonly isAuthorized: boolean;\n  readonly isFetching: boolean;\n  readonly isConnecting: boolean;\n  readonly isLoggingOut: boolean;\n  readonly error: Nullable<any>;\n  readonly authState: Nullable<string>;\n  readonly isRegistered: boolean;\n  readonly data?: any;\n};\n\nexport type AuthAction = ActionType<typeof actions>;\n\nconst initialState: AuthState = {\n  isAuthorized: false,\n  isRegistered: false,\n  isConnecting: true,\n  isLoggingOut: false,\n  isFetching: false,\n  error: null,\n  authState: null\n};\n\nexport const authReducer = (\n  state = initialState,\n  action: AuthAction | TelegramAction\n): AuthState => {\n  switch (action.type) {\n    case getType(actions.LogoutAction): {\n      return {\n        ...state,\n        isLoggingOut: true\n      };\n    }\n\n    case getType(actions.LogoutSuccessAction): {\n      return {\n        ...state,\n        isLoggingOut: false,\n        isAuthorized: false\n      };\n    }\n\n    case getType(actions.LogoutFailureAction): {\n      return {\n        ...state,\n        isLoggingOut: false\n      };\n    }\n\n    case getType(actions.LoginSuccessAction): {\n      return {\n        ...state,\n        isAuthorized: true\n      };\n    }\n\n    case getType(actions.SetCodeAction):\n    case getType(actions.SetPhoneNumberAction): {\n      return {\n        ...state,\n        isFetching: true\n      };\n    }\n\n    case getType(actions.SetCodeSuccessAction):\n    case getType(actions.SetPhoneNumberSuccessAction): {\n      return {\n        ...state,\n        isFetching: false\n      };\n    }\n\n    case getType(actions.SetCodeFailureAction):\n    case getType(actions.SetPhoneNumberFailureAction): {\n      return {\n        ...state,\n        isFetching: false\n      };\n    }\n\n    case getType(telegramActions.ReceiveMessageAction): {\n      const message = action.payload.data;\n\n      if (\n        message[\"@type\"] === TELEGRAM_MESSAGE_TYPES.UPDATE_AUTHORIZATION_STATE\n      ) {\n        switch (message.authorization_state[\"@type\"]) {\n          case AUTHORIZATION_STATES.LOADING:\n          case AUTHORIZATION_STATES.WAIT_TDLIB: {\n            return {\n              ...state,\n              isConnecting: true\n            };\n          }\n\n          case AUTHORIZATION_STATES.AUTHORIZED: {\n            return {\n              ...state,\n              isConnecting: false,\n              isAuthorized: true\n            };\n          }\n\n          default: {\n            return {\n              ...state,\n              isConnecting: false,\n              authState: message.authorization_state[\"@type\"]\n            };\n          }\n        }\n      }\n\n      return state;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import { ActionType, getType } from \"typesafe-actions\";\nimport { ReceiveMessageAction } from \"../telegram/actions\";\nimport { TelegramAction } from \"../telegram/reducer\";\nimport { TELEGRAM_MESSAGE_TYPES } from \"../telegram/types\";\nimport * as actions from \"./actions\";\nimport { Chat } from \"./types\";\n\nexport type ChatsState = {\n  readonly isFetching: boolean;\n  readonly chats: Map<number, Chat>;\n  readonly chatIds: number[];\n};\n\nexport type ChatsAction = ActionType<typeof actions>;\n\nconst initialState: ChatsState = {\n  isFetching: false,\n  chats: new Map(),\n  chatIds: []\n};\n\nexport const chatsReducer = (\n  state = initialState,\n  action: ChatsAction | TelegramAction\n): ChatsState => {\n  switch (action.type) {\n    case getType(actions.GetChatsAction): {\n      return {\n        ...state,\n        isFetching: true\n      };\n    }\n\n    case getType(actions.GetChatSuccessAction): {\n      const { chat } = action.payload;\n      const { chats } = state;\n\n      chats.set(chat.id, chat);\n\n      return {\n        ...state,\n        chats: new Map<number, Chat>(chats)\n      };\n    }\n\n    case getType(actions.GetChatsSuccessAction): {\n      return {\n        ...state,\n        chatIds: action.payload.chats\n      };\n    }\n\n    case getType(ReceiveMessageAction): {\n      const message = action.payload.data;\n\n      switch (message[\"@type\"]) {\n        case TELEGRAM_MESSAGE_TYPES.UPDATE_CHAT_READ_INBOX: {\n          let { chats } = state;\n          const chat = chats.get(message.chat_id);\n\n          if (chat) {\n            const newChat = {\n              ...chat,\n              unread_count: message.unread_count\n            };\n\n            chats.set(newChat.id, newChat);\n\n            chats = new Map(chats);\n          }\n\n          return {\n            ...state,\n            chats\n          };\n        }\n\n        default: {\n          return state;\n        }\n      }\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import { ActionType, getType } from \"typesafe-actions\";\nimport * as actions from \"./actions\";\nimport {\n  TELEGRAM_CONNECTION_STATE,\n  TELEGRAM_MESSAGE_TYPES,\n  TelegramOptions\n} from \"./types\";\n\nexport type TelegramState = {\n  readonly isConnecting: boolean;\n  readonly isReady: boolean;\n  readonly options: Partial<TelegramOptions>;\n};\n\nexport type TelegramAction = ActionType<typeof actions>;\n\nconst initialState: TelegramState = {\n  isConnecting: true,\n  isReady: false,\n  options: {}\n};\n\nexport const telegramReducer = (\n  state = initialState,\n  action: TelegramAction\n): TelegramState => {\n  switch (action.type) {\n    case getType(actions.ReceiveMessageAction): {\n      const message = action.payload.data;\n\n      switch (message[\"@type\"]) {\n        case TELEGRAM_MESSAGE_TYPES.UPDATE_CONNECTION_STATE: {\n          switch (message.state[\"@type\"]) {\n            case TELEGRAM_CONNECTION_STATE.CONNECTING: {\n              return {\n                ...state,\n                isConnecting: true\n              };\n            }\n\n            case TELEGRAM_CONNECTION_STATE.READY: {\n              return {\n                ...state,\n                isConnecting: false\n              };\n            }\n\n            default: {\n              return state;\n            }\n          }\n        }\n\n        case TELEGRAM_MESSAGE_TYPES.READY: {\n          if (\n            message[\"@extra\"] &&\n            message[\"@extra\"][\"@type\"] === \"setTdlibParameters\"\n          ) {\n            return {\n              ...state,\n              isReady: true\n            };\n          }\n\n          return state;\n        }\n\n        case TELEGRAM_MESSAGE_TYPES.UPDATE_OPTION: {\n          const { options } = state;\n\n          options[message.name] = message.value.value;\n\n          return {\n            ...state,\n            options: options\n          };\n        }\n\n        default: {\n          return state;\n        }\n      }\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { StateType } from \"typesafe-actions\";\nimport { appReducer } from \"./app/reducer\";\nimport { authReducer } from \"./auth/reducer\";\nimport { chatsReducer } from \"./chats/reducer\";\nimport { telegramReducer } from \"./telegram/reducer\";\n\nexport const rootReducer = combineReducers({\n  app: appReducer,\n  auth: authReducer,\n  telegram: telegramReducer,\n  chats: chatsReducer\n});\n\nexport type RootState = StateType<typeof rootReducer>;\n","export class GeoApiService {\n  static getCountryCode() {\n    return fetch(\"https://ip.nf/me.json\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        return data.ip.country_code;\n      });\n  }\n}\n","import { all, put, takeEvery } from \"redux-saga/effects\";\nimport { getType } from \"typesafe-actions\";\nimport { GeoApiService } from \"../../services/GeoApiService\";\nimport * as actions from \"./actions\";\n\nfunction* getCountryCode() {\n  try {\n    const countryCode = yield GeoApiService.getCountryCode();\n\n    yield put(actions.GetCountryCodeSuccessAction(countryCode));\n  } catch {\n    yield put(actions.GetCountryCodeFailureAction());\n  }\n}\n\nexport function* appSaga() {\n  yield all([takeEvery(getType(actions.GetCountryCodeAction), getCountryCode)]);\n}\n","import { all, takeEvery, call, put } from \"redux-saga/effects\";\nimport { eventChannel } from \"redux-saga\";\nimport { getType } from \"typesafe-actions\";\nimport uuid from \"uuid\";\n\nimport { AUTHORIZATION_STATES } from \"./types\";\nimport {\n  ReceiveMessageAction,\n  SendMessageAction,\n  SendMessageFailureAction,\n  SendMessageSuccessAction\n} from \"./actions\";\n\nconst TelegramWorker = require(\"../../services/telegram.worker\");\n\nlet worker: any;\n\nconst promises = new Map<\n  string,\n  {\n    resolve: any;\n    reject: any;\n  }\n>();\n\nfunction createWorker() {\n  worker = new TelegramWorker();\n\n  return eventChannel((emit: any) => {\n    worker.onmessage = (event: any) => {\n      emit(\n        ReceiveMessageAction({\n          data: event.data\n        })\n      );\n    };\n\n    return worker.terminate;\n  });\n}\n\nfunction* subscribeToTelegramWorker() {\n  const channel = yield createWorker();\n\n  yield takeEvery(channel, dispatchMessage);\n}\n\nfunction* dispatchMessage(action: any) {\n  const message = action.payload.data;\n\n  if (message && message[\"@extra\"]) {\n    const { messageId } = message[\"@extra\"];\n    const promise = promises.get(messageId);\n\n    if (promise) {\n      if (message[\"@type\"] === \"error\") {\n        promise.reject(action);\n      } else {\n        promise.resolve(action);\n      }\n    }\n  }\n\n  return yield put(action);\n}\n\nfunction* sendMessage(action: any) {\n  if (!worker) {\n    throw new Error(\"Worker is not yet ready\");\n  }\n\n  try {\n    yield asyncSendMessage(action.payload);\n\n    put(SendMessageSuccessAction());\n  } catch {\n    put(SendMessageFailureAction());\n  }\n}\n\nexport const asyncSendMessage = (message: any): Promise<any> => {\n  console.warn(\"Send message:\", message);\n\n  return new Promise((resolve, reject) => {\n    const id = uuid.v4();\n\n    promises.set(id, {\n      resolve,\n      reject\n    });\n\n    worker.postMessage({\n      type: \"send\",\n      payload: {\n        ...message,\n        \"@extra\": {\n          messageId: id\n        }\n      }\n    });\n  });\n};\n\nfunction loadInitialData(action: any) {\n  switch (action.payload.data[\"@type\"]) {\n    case \"updateAuthorizationState\": {\n      if (\n        action.payload.data.authorization_state[\"@type\"] ===\n        AUTHORIZATION_STATES.AUTHORIZED\n      ) {\n        worker.postMessage({\n          type: \"send\",\n          payload: {\n            \"@type\": \"setOption\",\n            name: \"online\",\n            value: {\n              \"@type\": \"optionValueBoolean\",\n              value: true\n            }\n          }\n        });\n      }\n\n      break;\n    }\n    default: {\n      // add other side effects\n    }\n  }\n}\n\nexport function* telegramSaga() {\n  return yield all([\n    call(subscribeToTelegramWorker),\n    takeEvery(getType(ReceiveMessageAction), loadInitialData),\n    takeEvery(getType(SendMessageAction), sendMessage)\n  ]);\n}\n","import { all, put, takeEvery } from \"redux-saga/effects\";\nimport { ActionType, getType } from \"typesafe-actions\";\nimport { ReceiveMessageAction } from \"../telegram/actions\";\nimport { asyncSendMessage } from \"../telegram/saga\";\nimport {\n  AUTHORIZATION_STATES,\n  TELEGRAM_MESSAGE_TYPES\n} from \"../telegram/types\";\nimport * as actions from \"./actions\";\n\nfunction* updateAuthorization(action: ActionType<typeof ReceiveMessageAction>) {\n  switch (action.payload.data[\"@type\"]) {\n    case TELEGRAM_MESSAGE_TYPES.UPDATE_AUTHORIZATION_STATE: {\n      const message = action.payload.data;\n\n      if (\n        message.authorization_state[\"@type\"] === AUTHORIZATION_STATES.AUTHORIZED\n      ) {\n        yield put(actions.LoginSuccessAction());\n      }\n\n      break;\n    }\n\n    default: {\n      // do nothing\n    }\n  }\n}\n\nfunction* logout() {\n  try {\n    yield asyncSendMessage({\n      \"@type\": \"logOut\"\n    });\n\n    yield put(actions.LogoutSuccessAction());\n  } catch {\n    yield put(actions.LogoutFailureAction());\n  }\n}\n\nfunction* setPhoneNumber(\n  action: ReturnType<typeof actions.SetPhoneNumberAction>\n): Generator {\n  try {\n    yield asyncSendMessage({\n      \"@type\": \"setAuthenticationPhoneNumber\",\n      phone_number: action.payload.phone\n    });\n\n    yield put(actions.SetPhoneNumberSuccessAction());\n  } catch (e) {\n    yield put(actions.SetPhoneNumberFailureAction());\n  }\n}\n\nfunction* setCode(action: ReturnType<typeof actions.SetCodeAction>): Generator {\n  try {\n    yield asyncSendMessage({\n      \"@type\": \"checkAuthenticationCode\",\n      code: action.payload.code\n    });\n\n    yield put(actions.SetCodeSuccessAction());\n  } catch (error) {\n    yield put(actions.SetCodeFailureAction());\n  }\n}\n\nfunction* resendCode(): Generator {\n  try {\n    yield asyncSendMessage({\n      \"@type\": \"resendAuthenticationCode\"\n    });\n\n    yield put(actions.ResendCodeSuccessAction());\n  } catch (error) {\n    yield put(actions.ResendCodeFailureAction());\n  }\n}\n\nfunction* checkPassword(\n  action: ReturnType<typeof actions.CheckPasswordAction>\n): Generator {\n  try {\n    yield asyncSendMessage({\n      \"@type\": \"checkAuthenticationPassword\",\n      password: action.payload.password\n    });\n\n    yield put(actions.CheckPasswordSuccessAction());\n  } catch (error) {\n    yield put(actions.CheckPasswordFailureAction());\n  }\n}\n\nexport function* authSaga() {\n  return yield all([\n    takeEvery(getType(ReceiveMessageAction), updateAuthorization),\n    takeEvery(getType(actions.SetPhoneNumberAction), setPhoneNumber),\n    takeEvery(getType(actions.SetCodeAction), setCode),\n    takeEvery(getType(actions.ResendCodeAction), resendCode),\n    takeEvery(getType(actions.CheckPasswordAction), checkPassword),\n    takeEvery(getType(actions.LogoutAction), logout)\n  ]);\n}\n","export const LONG_MAX_VALUE = \"9223372036854775807\";\n","import { all, put, takeEvery } from \"redux-saga/effects\";\nimport { getType } from \"typesafe-actions\";\nimport { LONG_MAX_VALUE } from \"../../constants/number\";\nimport { asyncSendMessage } from \"../telegram/saga\";\nimport * as actions from \"./actions\";\n\nfunction* getChats(action: ReturnType<typeof actions.GetChatsAction>) {\n  const { params } = action.payload;\n\n  try {\n    const { payload } = yield asyncSendMessage({\n      \"@type\": \"getChats\",\n      limit: params.limit,\n      offset_order: params.offsetOrder || LONG_MAX_VALUE,\n      offset_chat_id: params.offsetChatId || 0\n    });\n\n    yield put(actions.GetChatsSuccessAction(payload.data.chat_ids));\n  } catch (error) {\n    yield put(actions.GetChatsFailureAction());\n  }\n}\n\nfunction* getChat(action: ReturnType<typeof actions.GetChatAction>) {\n  const { chatId } = action.payload;\n\n  try {\n    const { payload } = yield asyncSendMessage({\n      \"@type\": \"getChat\",\n      chat_id: chatId\n    });\n\n    yield put(actions.GetChatSuccessAction(payload.data));\n  } catch (error) {\n    yield put(actions.GetChatFailureAction());\n  }\n}\n\nexport function* chatsSaga() {\n  yield all([\n    takeEvery(getType(actions.GetChatsAction), getChats),\n    takeEvery(getType(actions.GetChatAction), getChat)\n  ]);\n}\n","import { all, call } from \"redux-saga/effects\";\nimport { appSaga } from \"./app/saga\";\nimport { authSaga } from \"./auth/saga\";\nimport { chatsSaga } from \"./chats/saga\";\nimport { telegramSaga } from \"./telegram/saga\";\n\nexport function* rootSaga() {\n  return yield all([\n    call(appSaga),\n    call(telegramSaga),\n    call(authSaga),\n    call(chatsSaga)\n  ]);\n}\n","import { applyMiddleware, createStore } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport { environment } from \"../config/environment\";\nimport { rootReducer } from \"./reducer\";\nimport { rootSaga } from \"./saga\";\n\nconst logger = createLogger({\n  predicate: () => environment.isLoggerEnabled\n});\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const configureStore = (preloadedState = {}) => {\n  const store = createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(logger, sagaMiddleware)\n  );\n\n  let sagaTask = sagaMiddleware.run(rootSaga);\n\n  if ((module as any).hot) {\n    (module as any).hot.accept(\"./reducer\", () => {\n      const nextRootReducer = require(\"./reducer\");\n      store.replaceReducer(nextRootReducer);\n    });\n\n    (module as any).hot.accept(\"./saga\", () => {\n      const nextRootSaga = require(\"./saga\");\n\n      sagaTask.cancel();\n\n      sagaTask.done.then(() => {\n        sagaTask = sagaMiddleware.run(nextRootSaga);\n      });\n    });\n  }\n\n  return store;\n};\n","import React, { ComponentClass } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\nimport { App } from \"./App\";\nimport {\n  ConnectedIntlProvider,\n  TextComponent\n} from \"./components/common/connected-intl-provider/ConnectedIntlProvider\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { configureStore } from \"./store/configureStore\";\nimport { enableTabMode } from \"./utils/enableTabMode\";\n\nconst rootElement = document.getElementById(\"root\");\nconst AppStore = configureStore();\n\nconst render = (Component: ComponentClass) => {\n  ReactDOM.render(\n    <Provider store={AppStore}>\n      <ConnectedIntlProvider textComponent={TextComponent}>\n        <HashRouter>\n          <Component />\n        </HashRouter>\n      </ConnectedIntlProvider>\n    </Provider>,\n    rootElement\n  );\n};\n\nrender(App);\n\nif ((module as any).hot) {\n  (module as any).hot.accept(\"./App\", () => {\n    const NextApp = require(\"./App\").App;\n\n    render(NextApp);\n  });\n}\n\nenableTabMode();\nserviceWorker.register();\n","export const enableTabMode = () => {\n  const TAB_MODE_CLASSNAME = \"rt-tab-mode\";\n\n  document.addEventListener(\"keydown\", (event: KeyboardEvent) => {\n    if (event.key === \"Tab\") {\n      document.body.classList.add(TAB_MODE_CLASSNAME);\n    }\n\n    document.addEventListener(\"mousemove\", onMouseMove);\n  });\n\n  function onMouseMove(): void {\n    document.body.classList.remove(TAB_MODE_CLASSNAME);\n\n    document.removeEventListener(\"mousemove\", onMouseMove);\n  }\n};\n"],"sourceRoot":""}